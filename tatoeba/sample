#!/usr/bin/env python3
import os
import argparse
import random
import re
import subprocess

HERE = os.path.dirname(os.path.abspath(__file__))
CORPORA = [
    os.path.join(HERE, 'sentences_%02d.txt' % nn)
    for nn in (1, 2, 3)
]


class Mentence(object):
    def __init__(self, text):
        self.text = text


def parse_cmdline():
    parser = argparse.ArgumentParser()
    parser.add_argument('-a', '--all', action='store_true',
                        help='Play ALL sentences matching a word')
    parser.add_argument('-v', '--voices', metavar='VOICE', nargs='*',
                        help='Use these voices')
    parser.add_argument('words', metavar='WORD', nargs='*',
                        help='Japanese words')
    return parser.parse_args()


def main():
    args = parse_cmdline()
    voices = args.voices or get_voices()

    for word in get_words(args.words):
        for level, corpus in zip('abcdefg', CORPORA):
            hits = run_grep(corpus, word)
            if hits:
                break

        if not hits:
            print('No sentences found which contain %r' % word)
            print('')
        else:
            if args.all:
                random.shuffle(hits)
                chosen = hits
            else:
                chosen = [random.choice(hits)]
            for jpn, eng in chosen:
                print('[%s%s] %s' % (level, len(hits), jpn.text))
                subprocess.run(['say', '-v', random.choice(voices), jpn.text])

                input('Press Enter to show the translation...')
                print(eng.text)
                print('')


def get_voices():
    output = run('say', '-v', '?')
    return [
        line.split(' ', 1)[0]
        for line in output.split('\n')
        if 'ja_JP' in line
    ]


def run_grep(corpus, word):
    output = run('grep', word, corpus)
    return [
        line_to_hit(line)
        for line in output.split('\n')
        if line
    ]


def run(*cmdline):
    return subprocess.run(cmdline, stdout=subprocess.PIPE, encoding='utf8').stdout


def line_to_hit(line):
    m = re.match(r'^(\d+\*?)\t(.*)\t(\d+\*?)\t(.*)$', line)
    return (Mentence(m[2]), Mentence(m[4]))


def get_words(cli_words):
    for word in cli_words:
        yield word
    while True:
        try:
            word = input('Enter a japanese word: ')
        except KeyboardInterrupt:
            return
        if not word:
            return
        yield word


if __name__ == '__main__':
    main()
