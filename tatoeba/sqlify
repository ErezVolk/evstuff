#!/usr/bin/env python3
import argparse
import csv
import os
import time
import sqlalchemy
import sqlalchemy.orm
import sqlalchemy.ext.declarative
from tatoeba import Base


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-o', '--output', metavar='SQLITE_FILE',
                        help='File to write',
                        default='tatoeba.sqlite')
    args = parser.parse_args()

    if os.path.isfile(args.output):
        os.unlink(args.output)

    engine = sqlalchemy.create_engine('sqlite:///%s' % args.output)
    Base.metadata.create_all(bind=engine)

    session_factory = sqlalchemy.orm.session.sessionmaker(bind=engine, autocommit=True)

    session = session_factory()
    for model in Base.__subclasses__():
        table = model.__tablename__
        want = getattr(model, 'want', lambda x: True)
        fn = '%s.csv' % table
        with open(fn, 'r') as fo:
            print('Reading %r...' % (fn))
            t0 = time.perf_counter()
            reader = csv.DictReader(fo, model._FIELDS, dialect='excel-tab')

            num_read = 0
            num_used = 0
            threshold = 1000

            session.begin()
            for line in reader:
                num_read += 1
                if want(line):
                    session.add(model(**line))
                    num_used += 1
                if num_read == threshold:
                    print('...%s of %s (%s%%)...' % (num_used, num_read, int(num_used * 100 / num_read)))
                    threshold = int(threshold * 3 / 2)
            session.commit()

            t1 = time.perf_counter()
            secs = t1 - t0
            print('...%s of %s line(s) in %.02f Sec' % (num_used, num_read, secs))

    session.close()


if __name__ == '__main__':
    main()
