#!/usr/bin/env python3
"""Spleet audio files by silence"""
import argparse
from pathlib import Path
import typing as t
import re

import numpy as np
import numpy.typing as npt
import pandas as pd
from pydub import AudioSegment


SplitPoint = t.Union[float, int]


class Spleet:
    """Spleet audio files by silence"""
    args: argparse.Namespace
    min_ms: int

    def main(self):
        """Entry point"""
        for path in self.parse_args():
            self.spleet(path)

    def parse_args(self):
        """Command line"""
        parser = argparse.ArgumentParser(description="Split audio files by silence")
        parser.add_argument(
            "-m",
            "--mean",
            metavar="MM[:SS]",
            type=self.mmss_to_ms,
            default="2:00",
            help="Aim for mean split duration [default: 2:00]",
        )
        parser.add_argument(
            "--slice-ms",
            type=int,
            default=50,
            help="Used for silence estimation",
        )
        parser.add_argument(
            "--top-quantile",
            type=float,
            default=0.99,
            help="Used for silence estimation",
        )
        parser.add_argument(
            "--threshold-nth",
            type=int,
            default=32,
            help="Used for silence estimation",
        )
        parser.add_argument(
            "--wiggle-nth",
            type=int,
            default=4,
            help="Used for split point search",
        )
        parser.add_argument(
            "-o",
            "--output",
            type=Path,
            help="Write output script",
        )
        parser.add_argument(
            "files",
            metavar="MP3_FILE",
            nargs="+",
            type=Path,
            help="Input file",
        )
        self.args = parser.parse_args()
        self.min_ms = self.args.mean // self.args.wiggle_nth
        return self.args.files

    def spleet(self, path: Path):
        """Process one audio file"""
        points_ms = self.get_splitpoints(path)
        points_text = ["0.00"] + [self.ms_to_mp3splt(ms) for ms in points_ms] + ["EOF"]
        points = " ".join(points_text)
        line = f"mp3splt -f -n -d '.' -o '@f/@f @n2' '{path}' {points}"
        print(line)
        if not self.args.output:
            return

        existed = self.args.output.is_file()
        with open(self.args.output, "a+t", encoding="utf-8") as fobj:
            fobj.write(line)
            fobj.write("\n")
        if not existed:
            self.args.output.chmod(0o755)

    @classmethod
    def ms_to_mp3splt(cls, msec: SplitPoint) -> str:
        """Convert number to the time format used by mp3splt"""
        if np.isnan(msec):
            return ""

        secs, millis = divmod(msec, 1000)
        mins, secs = divmod(secs, 60)
        if millis == 0:
            return f"{mins}.{secs:02d}"

        return f"{mins}.{secs:02d}.{millis // 10:02d}"

    @classmethod
    def mmss_to_ms(cls, mmss: str) -> int:
        """Convert MIN:SEC string like '1:20' to milliseconds (80000)"""
        if not (match := re.match(r"^(\d+):(\d\d)$", mmss)):
            raise argparse.ArgumentTypeError

        return (int(match.group(1)) * 60 + int(match.group(2))) * 1000

    def get_splitpoints(self, path: Path) -> list[SplitPoint]:
        """Find where to split"""
        snd = AudioSegment.from_file(path)
        duration_ms = len(snd)
        if duration_ms <= self.args.mean + self.min_ms:
            return []

        sliceable_ms = (len(snd) // self.args.slice_ms) * self.args.slice_ms
        rmss = np.array([
            snd[start_ms : start_ms + self.args.slice_ms].rms
            for start_ms in range(0, sliceable_ms, self.args.slice_ms)
        ])
        threshold = np.quantile(rmss, self.args.top_quantile) / self.args.threshold_nth
        vads = rmss > threshold

        run_values, run_starts, run_lengths = self.find_runs(vads)
        sil_tmap = run_values == 0
        sils = pd.DataFrame({
            "start": run_starts[sil_tmap] * self.args.slice_ms,
            "length": run_lengths[sil_tmap] * self.args.slice_ms,
        })
        sils["end"] = sils.start + sils.length

        return self.sils_to_points(sils, duration_ms)

    def sils_to_points(self, sils: pd.DataFrame, duration_ms: int) -> list[SplitPoint]:
        """Find split points from silences"""
        points = []
        target = self.args.mean
        limit_ms = duration_ms - self.min_ms
        while target <= limit_ms:
            window_min = target - self.min_ms
            window_max = target + self.min_ms
            rows = sils.loc[(sils.start < window_max) & (sils.end > window_min)]
            if len(rows) == 0:
                point = np.nan
            else:
                row = rows.loc[rows.length.idxmax()]
                if row.length > self.args.slice_ms:
                    point = row.end - self.args.slice_ms
                else:
                    point = (row.start + row.end) // 2
                if point > limit_ms:
                    point = np.nan

            points.append(point)
            target = point + self.args.mean

        return points

    @classmethod
    def find_runs(cls, arr: npt.ArrayLike) -> t.Tuple[np.ndarray, np.ndarray, np.ndarray]:
        """Find runs of consecutive items in an array.

        https://gist.github.com/alimanfoo/c5977e87111abe8127453b21204c1065
        """

        # ensure array
        arr = np.asanyarray(arr)
        if arr.ndim != 1:
            raise ValueError('only 1D array supported')
        nvals = arr.shape[0]

        # handle empty array
        if nvals == 0:
            return np.array([]), np.array([]), np.array([])

        # find run starts
        loc_run_start = np.empty(nvals, dtype=bool)
        loc_run_start[0] = True
        np.not_equal(arr[:-1], arr[1:], out=loc_run_start[1:])
        run_starts = np.nonzero(loc_run_start)[0]

        # find run values
        run_values = arr[loc_run_start]

        # find run lengths
        run_lengths = np.diff(np.append(run_starts, nvals))

        return run_values, run_starts, run_lengths


if __name__ == "__main__":
    Spleet().main()
