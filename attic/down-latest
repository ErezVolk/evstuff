#!/usr/bin/env python3
from argparse import ArgumentParser
from datetime import datetime
from pathlib import Path
import subprocess
import sys


def main():
    parser = ArgumentParser()
    parser.add_argument(
        "-b", "--backup",
        type=Path,
        help="Where the backups are",
        default=Path.home() / "Dropbox" / "Backup",
    )
    parser.add_argument(
        "-t", "--translation",
        type=Path,
        help="Where the work directories are",
        default=Path.home() / "translation",
    )
    parser.add_argument(
        "-T", "--timestamp",
        type=Path,
        help="Timestamp file name (under translation directory, unless specified)",
        default=".latest",
    )
    parser.add_argument(
        "-m", "--maximum",
        type=int,
        help="Maximum number of backups to download",
        default=5,
    )
    args = parser.parse_args()

    backup = args.backup
    translation = args.translation

    timestamp = args.timestamp
    if str(timestamp) == timestamp.name:
        timestamp = translation/timestamp
    try:
        ref_mtime = timestamp.stat().st_mtime
    except FileNotFoundError:
        ref_mtime = 0

    tarballs = {
        tarball: mtime
        for tarball in backup.glob("*.tar.xz")
        if (mtime := tarball.stat().st_mtime) > ref_mtime
    }

    folders = []
    for tarball in sorted(tarballs, key=tarballs.get, reverse=True):
        stem, dot, suffixes = tarball.name.partition(".")
        found = [
            f
            for f in translation.glob(f"*_{stem}")
            if f.is_dir() and not f.is_symlink() and (f / "Makefile").is_file()
        ]
        if len(found) != 1:
            if len(found) > 1:
                print(f"More than one folder {translation}/*_{stem}")
            continue

        folders.insert(0, found[0])
        if len(folders) >= args.maximum:
            break

    if not folders:
        print("Nothing to download...")
        return -1

    input(f"Press Enter to run 'make down' in {' '.join(f.name for f in folders)}...")

    for folder in folders:
        subprocess.run(
            "make down",
            shell=True,
            cwd=folder,
            check=True
        )

    subprocess.run(
        "translation-stats",
        shell=True,
        check=True
    )

    with open(timestamp, "w", encoding="utf-8") as tsfo:
        for line in [datetime.utcnow()] + folders:
            tsfo.write(str(line))
            tsfo.write("\n")

    return 0


if __name__ == "__main__":
    sys.exit(main())
