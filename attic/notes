#!/usr/bin/env python3
"""Random musical keys for practice"""
import argparse
from dataclasses import dataclass
import io
from pathlib import Path
import random
import re
from collections.abc import Iterable
import typing

# TODO: Modes (e.g., "dorian: major-1")

T = typing.TypeVar("T")

NSETS = (
    ("C"),
    ("C♯", "D♭"),
    ("D"),
    ("D♯", "E♭"),
    ("E"),
    ("F"),
    ("F♯", "G♭"),
    ("G"),
    ("G♯", "A♭"),
    ("A"),
    ("A♯", "B♭"),
    ("B"),
)

SCALE_FIX = {
    "ANY": {},
    "major": {
        "G♯": "A♭",
        "D♯": "E♭",
        "A♯": "B♭",
    },
    "minor": {
        "G♭": "F♯",
        "D♭": "C♯",
        "A♭": "G♯",
        # "A♯": "B♭",  (according to Wikipedia)
    }
}

DRILLS = (
    "octaves", "fifths", "fourths", "chairs"
)

DEFAULT_CONFIG = """
note:
  : ANY

scale:
  -major: major
  -natural minor: minor
  -harmonic minor: minor
  -melodic minor: minor

arp:
  M: major
  m: minor
  ⁷: major
  m⁷: minor
  M⁷: major
  ' major pentatonic': major
  ' minor pentatonic': minor
"""


@dataclass
class Configuration:
    drills: dict[str, dict[str, str]]
    defaults: list[str]


def main():
    """Random musical keys for practice"""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "drill",
        nargs="?",
    )
    parser.add_argument(
        "-n",
        "--count",
        type=int,
        default=len(NSETS),
    )
    parser.add_argument(
        "-c",
        "--config",
        type=Path,
        default=Path.home() / ".notesrc",
    )
    args = parser.parse_args()

    if args.drill == "default-config":
        print(DEFAULT_CONFIG)
        return

    try:
        with open(args.config, "r", encoding="UTF-8") as fobj:
            config = parse_config(fobj)
    except (FileNotFoundError, ValueError):
        config = parse_config(io.StringIO(DEFAULT_CONFIG))
    drills = config.drills

    drill = args.drill
    if not drill:
        drill = random.choice(config.defaults)
        if len(config.defaults) > 1:
            print(f"[{drill} × {args.count}]")
    elif drill not in drills:
        raise ValueError(f"Unknown entity {repr(drill)}")

    n = args.count
    all_suffs = drills[drill]
    nsets = choose(NSETS, min(n, len(NSETS)))
    suffs = choose(all_suffs, len(nsets))
    nset_suffs = list(zip(nsets, suffs))
    if (n := n - len(nset_suffs)) > 0:
        all_nset_suffs = {(nset, suff) for nset in NSETS for suff in all_suffs}
        other_nset_suffs = all_nset_suffs - set(nset_suffs)
        if len(other_nset_suffs) > 0:
            nset_suffs.extend(choose(
                other_nset_suffs,
                min(n, len(other_nset_suffs))
            ))
        if (n := n - len(nset_suffs)) > 0:
            nset_suffs.extend(choose(all_nset_suffs, n))
    nsuffs = [
        "".join([choose_note(nset, all_suffs[suff]), suff])
        for nset, suff in nset_suffs
    ]
    random.shuffle(nsuffs)
    if len(one_line := " ".join(nsuffs)) < 80:
        print(one_line)
    else:
        print("\n".join(nsuffs))


def choose_note(nset, scale: str) -> str:
    """Choose one way of spelling a note"""
    note = random.choice(nset)
    return SCALE_FIX[scale].get(note, note)


def choose(options: Iterable[T], n: int) -> list[T]:
    """Choose so we have as many "full" repetitions and a random tail"""
    opts = list(options)
    nopts = len(opts)

    if n <= nopts:
        return random.sample(opts, max(n, 1))

    ntail = n % nopts
    n_full_rounds = (n - ntail) // nopts

    choices = (opts * n_full_rounds) + random.sample(opts, ntail)
    return choices


def parse_config(stream: typing.TextIO) -> Configuration:
    SCALE_RE = "|".join(SCALE_FIX)
    drills = {}
    defaults = []
    curr = None
    for nline, line in enumerate(stream, 1):
        line = re.sub(r"\s*(#.*)?$", "", line)

        def match(expr):
            return re.fullmatch(expr, line)

        if (mobj := match(r"([*]?)(\S[^:]*):")):
            name = mobj.group(2).strip()
            drills[name] = curr = {}
            if mobj.group(1) == "*":
                defaults.append(name)
        elif (mobj := match(r"\s+([^:]*):\s+(" + SCALE_RE + ")")):
            if curr is None:
                raise ValueError(f"Key without section in line {nline}")
            name = mobj.group(1).strip()
            if name and name[0] in ["'", '"'] and name[-1] == name[0]:
                name = name[1:-1]
            curr[name] = mobj.group(2).strip()
        elif not match(r""):
            raise ValueError(f"Cannot parse line {nline}")
    return Configuration(
        drills=drills,
        defaults=defaults or list(drills),
    )


if __name__ == "__main__":
    main()
