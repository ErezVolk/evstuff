#!/usr/bin/env python3
"""Random musical keys for practice"""
import argparse
import io
from pathlib import Path
import random
import re
from collections.abc import Iterable
import typing

# TODO: Modes (e.g., "dorian: major-1")
# TODO: default-config
# TODO: default "What" (maybe a star)

T = typing.TypeVar("T")

NSETS = (
    ("C"),
    ("C♯", "D♭"),
    ("D"),
    ("D♯", "E♭"),
    ("E"),
    ("F"),
    ("F♯", "G♭"),
    ("G"),
    ("G♯", "A♭"),
    ("A"),
    ("A♯", "B♭"),
    ("B"),
)

SCALE_FIX = {
    "ANY": {},
    "major": {
        "G♯": "A♭",
        "D♯": "E♭",
        "A♯": "B♭",
    },
    "minor": {
        "G♭": "F♯",
        "D♭": "C♯",
        "A♭": "G♯",
        # "A♯": "B♭",  (according to Wikipedia)
    }
}

DRILLS = (
    "octaves", "fifths", "fourths", "chairs"
)

DEFAULT_CONFIG = """
note:
  : ANY

scale:
  -major: major
  -natural minor: minor
  -harmonic minor: minor
  -melodic minor: minor

arp:
  M: major
  m: minor
  ⁷: major
  m⁷: minor
  M⁷: major
  ' major pentatonic': major
  ' minor pentatonic': minor
"""


def main():
    """Random musical keys for practice"""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "what",
        nargs="?",
    )
    parser.add_argument(
        "count",
        nargs="?",
        default=len(NSETS),
    )
    parser.add_argument(
        "-c",
        "--config",
        type=Path,
        default=Path.home() / ".notesrc",
    )
    args = parser.parse_args()

    try:
        with open(args.config, "r", encoding="UTF-8") as fobj:
            config = parse_config(fobj)
    except (FileNotFoundError, ValueError):
        config = parse_config(io.StringIO(DEFAULT_CONFIG))

    if not args.what:
        args.what = random.choice(list(config))
        print(f"{args.what} × {args.count}")
    elif args.what not in config:
        print(f"Unknown entity {repr(args.what)}")
        return

    n = args.count
    all_suffs = config[args.what]
    nsets = choose(NSETS, min(n, len(NSETS)))
    suffs = choose(all_suffs, len(nsets))
    nset_suffs = list(zip(nsets, suffs))
    if (n := n - len(nset_suffs)) > 0:
        all_nset_suffs = {(nset, suff) for nset in NSETS for suff in all_suffs}
        other_nset_suffs = all_nset_suffs - set(nset_suffs)
        nset_suffs.extend(choose(
            other_nset_suffs,
            min(n, len(other_nset_suffs))
        ))
        if (n := n - len(nset_suffs)) > 0:
            nset_suffs.extend(choose(all_nset_suffs, n))
    nsuffs = [
        "".join([choose_note(nset, all_suffs[suff]), suff])
        for nset, suff in nset_suffs
    ]
    if len(one_line := " ".join(nsuffs)) < 80:
        print(one_line)
    else:
        print("\n".join(nsuffs))


def choose_note(nset, scale: str) -> str:
    """Choose one way of spelling a note"""
    note = random.choice(nset)
    return SCALE_FIX[scale].get(note, note)


def choose(options: Iterable[T], n: int) -> list[T]:
    """Choose so we have as many "full" repetitions and a random tail"""
    opts = list(options)
    nopts = len(opts)

    if n <= nopts:
        return random.sample(opts, max(n, 1))

    ntail = n % nopts
    n_full_rounds = (n - ntail) // nopts

    choices = (opts * n_full_rounds) + random.sample(opts, ntail)

    random.shuffle(choices)
    return choices


def parse_config(stream: typing.TextIO) -> dict[str, dict[str, str]]:
    SCALE_RE = "|".join(SCALE_FIX)
    config = {}
    curr = None
    for nline, line in enumerate(stream, 1):
        line = re.sub(r"\s*(#.*)?$", "", line)

        def match(expr):
            return re.fullmatch(expr, line)

        if (mobj := match(r"(\S[^:]*):")):
            config[mobj.group(1).strip()] = curr = {}
        elif (mobj := match(r"\s+([^:]*):\s+(" + SCALE_RE + ")")):
            if curr is None:
                raise ValueError(f"Key without section in line {nline}")
            name = mobj.group(1).strip()
            if name and name[0] in ["'", '"'] and name[-1] == name[0]:
                name = name[1:-1]
            curr[name] = mobj.group(2).strip()
        elif not match(r""):
            raise ValueError(f"Cannot parse line {nline}")
    return config


if __name__ == "__main__":
    main()
