#!/usr/bin/env python3
"""Create venv wrapper for scripts"""
import argparse
from pathlib import Path

import typing as t


class Vrap:
    """Create venv wrapper for scripts"""

    parser: argparse.ArgumentParser
    args: argparse.Namespace

    def usage(self) -> None:
        """Parse command-line arguments"""
        parser = argparse.ArgumentParser()
        parser.add_argument(
            "scripts",
            metavar="SCRIPT",
            type=Path,
            nargs="+",
            help="A venv-needing Python script",
        )
        parser.add_argument(
            "--venv",
            type=Path,
            help="Path to virtual env",
            default=Path.home() / ".local" / "venv",
        )
        parser.add_argument(
            "--bin",
            type=Path,
            help="Where to put the wrappers",
            default=Path.home() / "bin",
        )
        parser.add_argument(
            "-f",
            "--force",
            action="store_true",
            help="Overwrite existing wrappers",
        )
        self.args = parser.parse_args()
        self.parser = parser

    def main(self) -> None:
        """Create venv wrapper for scripts"""
        self.usage()
        if not (venv := self.args.venv.resolve()).is_dir():
            self.fail(f"Create {self.args.venv}")
        if not self.args.bin.resolve().is_dir():
            self.fail(f"Create {self.args.bin}")
        missing = [path for path in self.args.scripts if not path.is_file()]
        if missing:
            self.fail(f"Missing: {' '.join(missing)}")

        for wrapped in self.args.scripts:
            wrapper = self.args.bin / wrapped.name
            if wrapper.is_symlink():
                print(f"Removing old symlink {wrapper}")
                wrapper.unlink()
            elif wrapper.is_file() and not self.args.force:
                self.fail(f"Not overwriting: {wrapper}")

            print(f"Creating {wrapper}")
            with open(wrapper, "wt", encoding="utf-8") as wfo:
                wfo.write("#!/bin/sh\n")
                wfo.write("# Generated by vrap\n\n")
                wfo.write(f'source "{venv}/bin/activate" && ')
                wfo.write(f'python "{wrapped.resolve()}" "$@"\n')

            wrapper.chmod(0o755)

    def fail(self, message: str) -> t.NoReturn:
        """Handy wrapper around `ArgumentParser.error()`"""
        self.parser.error(message)


if __name__ == "__main__":
    Vrap().main()
