#!/usr/bin/env python3.8
import argparse
import logging
from pathlib import Path
import re
import time
import random

import pandas as pd
import browser_cookie3
import requests


logging.basicConfig(format="%(asctime)s %(message)s")
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)


class LikeIt:
    NO_TITLE = "(N/A)"

    def run(self):
        parser = argparse.ArgumentParser(
            formatter_class=argparse.ArgumentDefaultsHelpFormatter,
            description="LibraryThing 'Will You Like It?'",
        )
        parser.add_argument(
            "-i",
            "--input",
            type=Path,
            default=Path.home() / "audible" / "wishlist.xls",
            help="Excel input",
        )
        parser.add_argument(
            "-o",
            "--output",
            type=Path,
            default=Path.cwd() / "likeit.xlsx",
            help="Output file",
        )
        parser.add_argument("-d", "--debug", action="store_true", help="Say more")
        parser.add_argument(
            "ltws",
            metavar="WORK_ID",
            type=int,
            nargs="*",
            help="Query specific LibraryThing works instead of spreadsheet",
        )
        self.args = parser.parse_args()

        if self.args.ltws:
            wishlist = self.make_wishlist()
        else:
            logger.info("Reading %s", self.args.input)
            wishlist = self.read_wishlist()

        cookies = browser_cookie3.firefox()

        done = {}
        undone = []
        checkpoint = time.time()
        for label, row in wishlist.iterrows():
            title = row.Title or self.NO_TITLE
            ltw = row.LTW
            tmap = wishlist.LTW == ltw

            if isinstance(ltw, str) and "/" in ltw:
                ltw = ltw[ltw.rindex("/") + 1 :]

            try:
                ltw = int(ltw)
                wishlist.loc[tmap, "LTW"] = ltw
            except ValueError:
                logger.warning("%s: No LTW", title)
                continue

            if ltw in done:
                continue

            desc = f"[{ltw}] {title}"

            time.sleep(random.uniform(0.01, 0.25))
            url = f"https://www.librarything.com/ajax_willilikeit.php?work={ltw}"
            try:
                reply = requests.get(url, cookies=cookies, timeout=60)
            except requests.exceptions.Timeout:
                undone.append(desc)
                logger.warning("%s: Timeout", desc)
                continue

            if reply.status_code != requests.codes.ok:
                undone.append(desc)
                logger.warning("%s: HTTP %d", desc, reply.status_code)
                continue

            text = reply.text
            if not (m := re.search(r'title="([0-9.]+), uncertainty ([0-9]+)"', text)):
                undone.append(desc)
                logger.warning("%s: BAD REPLY", desc)
                if self.args.debug:
                    logger.warning(text)
                    break
                continue

            if title == self.NO_TITLE:
                if (n := re.search(r"<i>([^<]+)</i> \(prediction confidence:", text)) :
                    title = n.group(1)
                    desc = f"[{ltw}] {title}"
                    wishlist.loc[tmap, "Title"] = title

            (score, uncertainty) = m.groups()
            logger.info("%s: score %s, uncertainty %s", desc, score, uncertainty)
            done[ltw] = (score, uncertainty)

            wishlist.loc[tmap, "L"] = float(score)
            wishlist.loc[tmap, "T"] = int(uncertainty)

            if self.args.debug:
                break

            if done and time.time() - checkpoint > 120:
                logger.info("Courtesy writing %s", self.args.output)
                wishlist.to_excel(self.args.output)
                checkpoint = time.time()

        logger.info("Number of works successfully queried: %d", len(done))
        if done:
            logger.info("Writing %s", self.args.output)
            if self.args.output.suffix.lower() == ".csv":
                wishlist.to_csv(self.args.output)
            else:
                wishlist.to_excel(self.args.output)

    def read_wishlist(self) -> pd.DataFrame:
        return pd.read_excel(self.args.input)

    def make_wishlist(self) -> pd.DataFrame:
        return pd.DataFrame(
            {
                "Title": self.NO_TITLE,
                "LTW": self.args.ltws,
                "L": 250.0,
                "T": 500,
            }
        )


if __name__ == "__main__":
    LikeIt().run()
