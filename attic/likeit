#!/usr/bin/env python3
"""Tells you if you'd like it."""
import argparse
import contextlib
import logging
import random
import re
import subprocess
import time
from pathlib import Path

try:
    import pandas as pd
    import browser_cookie3
    import requests
except ImportError:
    print("Please install requirements.")
    raise


logging.basicConfig(format="%(asctime)s %(message)s")
log = logging.getLogger(__name__)
log.setLevel(logging.INFO)


class LikeIt:
    """Tells you if you'd like a book."""

    def parse_cli(self) -> argparse.Namespace:
        """Handle usage."""
        parser = argparse.ArgumentParser(
            formatter_class=argparse.ArgumentDefaultsHelpFormatter,
            description="LibraryThing 'Will You Like It?'",
        )
        parser.add_argument(
            "-i",
            "--input",
            type=Path,
            default=Path.home() / "audible" / "wishlist.xls",
            help="Excel input",
        )
        parser.add_argument(
            "-o",
            "--output",
            type=Path,
            default=Path.cwd() / "likeit.xlsx",
            help="Output file",
        )
        parser.add_argument(
            "-d",
            "--debug",
            action="store_true",
            help="Say more",
        )
        parser.add_argument(
            "-O",
            "--no-open",
            action="store_true",
            help="Even if reading a spreadsheet, don't open",
        )
        parser.add_argument(
            "ltws",
            metavar="WORK_ID",
            nargs="*",
            help="Query specific LibraryThing works instead of spreadsheet",
        )
        return parser.parse_args()

    NO_TITLE = "(N/A)"
    TOO_LONG = 120

    args: argparse.Namespace

    def run(self):
        """Do the work."""
        self.args = self.parse_cli()

        if self.args.ltws:
            wishlist = self.make_wishlist()
        else:
            log.info("Reading %s", self.args.input)
            wishlist = self.read_wishlist()

        cookies = browser_cookie3.safari()

        done = {}
        undone = []
        checkpoint = time.time()
        for _, row in wishlist.iterrows():
            title = row.Title or self.NO_TITLE
            ltw = row.LTW
            tmap = ltw == wishlist.LTW

            ltw = re.sub(r"^.*librarything.com/work/(\d+)(/.*)?$", r"\1", ltw)

            try:
                ltw = int(ltw)
                wishlist.loc[tmap, "LTW"] = ltw
            except ValueError:
                log.warning("%s: No LTW", title)
                continue

            if ltw in done:
                continue

            desc = f"[{ltw}] {title}"

            time.sleep(random.uniform(0.01, 0.25))
            url = (
                f"https://www.librarything.com/"
                f"ajax_willilikeit.php?work={ltw}"
            )
            try:
                reply = requests.get(url, cookies=cookies, timeout=60)
            except requests.exceptions.Timeout:
                undone.append(desc)
                log.warning("%s: Timeout", desc)
                continue

            if not reply:
                undone.append(desc)
                log.warning("%s: HTTP %d", desc, reply.status_code)
                continue

            text = reply.text
            match = re.search(r'title="([0-9.]+), uncertainty ([0-9]+)"', text)
            if not match:
                undone.append(desc)
                log.warning("%s: BAD REPLY", desc)
                if self.args.debug:
                    log.warning(text)
                    break
                continue
            (score, uncertainty) = match.groups()

            if title == self.NO_TITLE:
                match = re.search(r"<i>([^<]+)</i> \(prediction ", text)
                if match:
                    title = match.group(1)
                    desc = f"[{ltw}] {title}"
                    wishlist.loc[tmap, "Title"] = title

            log.info("%s: score %s, uncertainty %s", desc, score, uncertainty)
            done[ltw] = (score, uncertainty)

            wishlist.loc[tmap, "L"] = float(score)
            wishlist.loc[tmap, "T"] = int(uncertainty)

            if self.args.debug:
                break

            if done and time.time() - checkpoint > self.TOO_LONG:
                log.info("Courtesy writing %s", self.args.output)
                wishlist.to_excel(self.args.output)
                checkpoint = time.time()

        log.info("Number of works successfully queried: %d", len(done))
        if done:
            log.info("Writing %s", self.args.output)
            if self.args.output.suffix.lower() == ".csv":
                wishlist.to_csv(self.args.output)
            else:
                wishlist.to_excel(self.args.output)

        if not self.args.no_open and not self.args.ltws:
            subprocess.run([
                "/usr/bin/open",
                str(self.args.input),
                str(self.args.output),
            ], check=False)

    def read_wishlist(self) -> pd.DataFrame:
        """Read the whole thing."""
        return pd.read_excel(self.args.input)

    def make_wishlist(self) -> pd.DataFrame:
        """Create mock spreadsheet when given LTW(s) from the command line."""
        return pd.DataFrame(
            {
                "Title": self.NO_TITLE,
                "LTW": self.args.ltws,
                "L": 250.0,
                "T": 500,
            },
        )


if __name__ == "__main__":
    LikeIt().run()
