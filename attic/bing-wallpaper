#!/usr/bin/env python3
import argparse
import requests
import lxml.etree
from io import StringIO
import re
from pathlib import Path


class BingWallpaper:
    BASE = "https://www.bing.com/"
    COUNTRIES = ("us", "jp", "cn", "uk", "de")

    def run(self):
        self.parse_args()

        self.directory = Path.home() / "Pictures" / "bing-wallpapers"
        self.scan_existing()
        self.download_archive()
        for cc in self.COUNTRIES:
            self.download(cc)

    def parse_args(self):
        parser = argparse.ArgumentParser(description="Download Bing wallpaper")
        parser.add_argument(
            "-f",
            "--force",
            action="store_true",
            help="Download even if already exists.",
        )
        parser.add_argument(
            "-a",
            "--archive",
            metavar="N",
            type=int,
            default=5,
            help="Try to download N archived images.",
        )
        group = parser.add_mutually_exclusive_group()
        group.add_argument(
            "-q", "--quiet", action="store_true", help="No output.",
        )
        group.add_argument(
            "-d", "--debug", action="store_true", help="More output.",
        )
        self.args = parser.parse_args()

    def scan_existing(self):
        self.stem_to_state = {}
        for fn in self.directory.iterdir():
            m = re.match(r"([^_]*)_.*\.jpg$", fn.name)
            if m:
                self.stem_to_state[m.group(1)] = "N/A"

    def download_archive(self):
        """Download N photos from the "archive" json."""
        if not self.args.archive:
            return
        r = requests.get(
            f"{self.BASE}HPImageArchive.aspx?format=js&n={self.args.archive}"
        )
        if r.status_code != requests.codes.ok:
            return
        for image in r.json()["images"]:
            self.handle_href(image["url"])

    def download(self, cc):
        """Download today's image from a specific country code."""
        page_r = requests.get(f"{self.BASE}?cc={cc}")
        if page_r.status_code != requests.codes.ok:
            return

        parser = lxml.etree.HTMLParser()
        html = lxml.etree.parse(StringIO(page_r.text), parser)
        for e in html.xpath('./head/link[@as="image"]'):
            if e.get("id") not in ("preloadBg", "bgLink"):
                continue

            astext = lxml.etree.tostring(e).decode()
            self.handle_href(e.get("href"), desc=astext, source=cc)

    def handle_href(self, href, desc=None, source=None):
        if not desc:
            desc = href

        if not source:
            source = href

        m = re.search(r"[.&=?]([^.&=?]*\.jpg)[.&=?]", href)
        if not m:
            self.write(f"I don't know what to do with {desc}")
            return

        self.debug(f"Considering {desc}")
        url = f"{self.BASE}/{href}"
        rn = m.group(1)

        m = re.match(r"([A-Za-z0-9]*)_[-A-Z]+[0-9]+_([0-9]+x[0-9]+.jpg)", rn)
        if not m:
            self.write(f"I don't know how to parse {desc}")
            return
        fn = m.group(1) + "_" + m.group(2)
        stem = m.group(1)

        if stem in self.stem_to_state:
            self.debug(f"Already downloaded {fn} from {self.stem_to_state[stem]}")
            return

        self.write(f"Downloading {rn} as {fn}")

        file_r = requests.get(url)
        with open(self.directory / fn, "wb") as fo:
            fo.write(file_r.content)
        self.stem_to_state[stem] = source

    def write(self, *args):
        if not self.args.quiet:
            print(*args)

    def debug(self, *args):
        if self.args.debug:
            print(*args)


if __name__ == "__main__":
    BingWallpaper().run()
