#!/usr/bin/env python
"""Download latest wallpapers from bing."""
import argparse
import json
import re
from io import StringIO
from pathlib import Path

import lxml.etree
import requests


class BingWallpaper:
    """Download latest wallpapers from bing."""

    BASE = "https://www.bing.com/"
    COUNTRIES = ("us", "jp", "cn", "uk", "de")

    stem_to_state: dict[str, str]
    args: argparse.Namespace
    directory: Path

    def run(self) -> None:
        """Download from bing."""
        self.parse_args()

        self.directory = Path.home() / "Pictures" / "bing-wallpapers"
        self.scan_existing()
        self.download_archive()
        for country_code in self.COUNTRIES:
            self.download(country_code)

    def parse_args(self) -> None:
        """Parse command line."""
        parser = argparse.ArgumentParser(description="Download Bing wallpaper")
        parser.add_argument(
            "-f",
            "--force",
            action="store_true",
            help="Download even if already exists.",
        )
        parser.add_argument(
            "-a",
            "--archive",
            metavar="N",
            type=int,
            default=5,
            help="Try to download N archived images.",
        )
        parser.add_argument(
            "-t",
            "--timeout",
            type=int,
            default=10,
            help="HTTP GET timeout (Seconds)",
        )
        group = parser.add_mutually_exclusive_group()
        group.add_argument(
            "-q", "--quiet", action="store_true", help="No output.",
        )
        group.add_argument(
            "-d", "--debug", action="store_true", help="More output.",
        )
        self.args = parser.parse_args()

    def scan_existing(self) -> None:
        """Find out what files we already have."""
        self.stem_to_state = {}
        for fname in self.directory.iterdir():
            match = re.match(r"([^_]*)_.*\.jpg$", fname.name)
            if match:
                self.stem_to_state[match.group(1)] = "N/A"

    def download_archive(self) -> None:
        """Download N photos from the "archive" json."""
        if not self.args.archive:
            return
        reply = requests.get(
            f"{self.BASE}HPImageArchive.aspx?format=js&n={self.args.archive}",
            timeout=self.args.timeout,
        )
        if not reply:
            return
        try:
            images = reply.json()["images"]
        except json.JSONDecodeError:
            return
        for image in images:
            self.handle_href(image["url"])

    def download(self, country_code: str) -> None:
        """Download today's image from a specific country code."""
        url = f"{self.BASE}?cc={country_code}"
        page_r = requests.get(url, timeout=self.args.timeout)
        if not page_r or not page_r.text:
            return

        parser = lxml.etree.HTMLParser()
        try:
            html = lxml.etree.parse(StringIO(page_r.text), parser)
        except lxml.etree.XMLSyntaxError:
            print(
                f"ERROR: Invalid HTML (length={len(page_r.text)}) "
                f"returned from {url}",
            )
            return
        for node in html.xpath('./head/link[@as="image"]'):
            if node.get("id") not in ("preloadBg", "bgLink"):
                continue

            astext = lxml.etree.tostring(node).decode()
            self.handle_href(
                node.get("href"),
                desc=astext,
                source=country_code,
            )

    def handle_href(
        self,
        href: str,
        desc: str = "",
        source: str = "",
    ) -> None:
        """Download an image."""
        if not desc:
            desc = href

        if not source:
            source = href

        match = re.search(r"[.&=?]([^.&=?]*\.(jpg|webp))[.&=?]", href)
        if not match:
            self.write(f"I don't know what to do with {desc}")
            return

        if match.group(2) != "jpg":
            return

        self.debug(f"Considering {desc}")
        url = f"{self.BASE}/{href}"
        remote_name = match.group(1)

        match = re.match(
            r"([A-Za-z0-9]+)_.+_([0-9]+x[0-9]+).*\.(jpg|webp)",
            remote_name,
        )
        if match:
            fname = "".join([
                match.group(1),
                "_",
                match.group(2),
                ".",
                match.group(3),
            ])
        else:
            match = re.match(
                r"([A-Za-z0-9]*)_[^.]*\.(jpg|webp)",
                remote_name,
            )
            if match:
                fname = match.group(1) + "." + match.group(3)

        if not match:
            self.write(f"I don't know how to parse {remote_name} in {desc}")
            return
        stem = match.group(1)

        if stem in self.stem_to_state:
            self.debug(
                f"Already downloaded {fname} "
                f"from {self.stem_to_state[stem]}",
            )
            return

        self.write(f"Downloading {remote_name} as {fname}")

        file_r = requests.get(url, timeout=self.args.timeout)
        with (self.directory / fname).open("wb") as fobj:
            fobj.write(file_r.content)
        self.stem_to_state[stem] = source

    def write(self, *args: str) -> None:
        """Write to stdout (unless configured not to)."""
        if not self.args.quiet:
            print(*args)

    def debug(self, *args: str) -> None:
        """Debug print (if configured)."""
        if self.args.debug:
            print(*args)


if __name__ == "__main__":
    BingWallpaper().run()
