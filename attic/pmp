#!/usr/bin/env python3
"""Practice Makes Perfect

Assuming you have more scales, drills, licks and etudes to practice regularly
than you have time for each day, this utility will present them to you in
random order. Sort of like spaced repetition, only _it never ends_.


About the code:
There are two different types of object identifiers:
- `x.label` is the name used by other parts of the system (references, config).
- `x.layout` is used to identify saved states.

Sometimes (e.g., in "well-known" things like the major scale), the label and
the layout are equal and human-readable ("major", etc.). Other times, the
layout is a hash of the different options, and the label is the reference
name.

Most objects also have `x.blurb`, which is for display purposes only.
"""
import argparse
import collections
from collections.abc import Iterable
import contextlib
import csv
import dataclasses
import datetime
import graphlib
import hashlib
import io
import logging
from pathlib import Path
import plistlib
import random
import re
import typing as t


DEFAULT_CONFIG = """
note:  # Just pick a note
  : ANY

scale:  # Play a scale
  -major: major
  -natural minor: minor

arp:  # Play an arpeggio
  M: major
  m: minor
  ⁷: major
  m⁷: minor
  M⁷: major

form:
  Blues in {}: C|F|G
  {}-major scale on the {} string: {major} {E|A|D|G}
"""


__TODO__ = """
- "ANY := C‖C#|Db‖D#|Eb‖...‖B" "major := C#|Db‖...‖B"
- Build modes, e.g., "altered := minor+7", then we can only predefine major
- A UI to mark what was done? With a metronome? And a drone?
"""


SEP = " ‖ "
Filename: t.TypeAlias = str | Path
Label: t.TypeAlias = str
Layout: t.TypeAlias = str
Entry: t.TypeAlias = "Etude | BookRef"
TableOfContents: t.TypeAlias = list[Entry]
Books: t.TypeAlias = dict[Label, "Book"]
Decks: t.TypeAlias = dict[Layout, "Deck"]

log = logging.getLogger("pmp")
tracked: set[Layout] = set()


class BadConfig(ValueError):
    """Problem with config file"""


class SerializationError(ValueError):
    """Raised internally when a deck cannot be restored."""


class Deck:
    """A deck of strings"""

    cards: tuple[str, ...]
    queue: list[str] = []
    used: bool = False
    label: Label
    layout: Layout
    preblurb: str

    MIN_SERIALIZABLE = 3
    SERIALIZEES = ("blurb", "label", "layout", "cards", "queue")

    def __init__(self, cards: Iterable[str], label="", layout=""):
        if layout and label and label != layout:
            raise ValueError("Cannot specify both label and layout")
        self.cards = tuple(cards)
        if not self.cards:
            raise ValueError("Empty decks not supported")
        if layout:
            self.preblurb = self.layout = self.label = layout
        else:
            self.label = label or "|".join(self.cards)
            hashobj = hashlib.sha256("\0".join(sorted(self.cards)).encode())
            self.layout = f":{hashobj.hexdigest()[:8]}:"
            self.preblurb = f"{self.label} ({self.layout})"

    def __len__(self) -> int:
        return len(self.cards)

    @property
    def blurb(self) -> str:
        """A description of the deck in its current state"""
        if self._midway():
            return f"{self.preblurb} {len(self.queue)} of {len(self)}"
        return f"{self.preblurb} {len(self)}"

    def _midway(self) -> bool:
        """Is a queue currently being dealt?"""
        return 0 < len(self.queue) < len(self)

    def serialize(self) -> dict:
        """Serialize"""
        if not self.used:
            raise SerializationError("Never drawn")
        if len(self) < self.MIN_SERIALIZABLE:
            raise SerializationError("Too small")
        return {key: getattr(self, key) for key in self.SERIALIZEES}

    def adapt(self, saved: dict[str, t.Any]) -> None:
        """Try to deserialized a deck which has been modified"""
        that = set(self._get_list(saved, "cards"))
        this = set(self.cards)
        if len(that & this) < self.MIN_SERIALIZABLE:
            raise SerializationError("Not enough shared cards to adapt")
        added = this - that
        gone = that - this
        log.debug("Adapted %s +%s -%s", self.label, list(added), list(gone))
        if not (queued := set(self._get_list(saved, "queue")) & this):
            raise SerializationError("No shared cards in queue")
        self._track("Adapting from old layout %r", saved.get("layout", "N/A"))
        self._set_queue(queued & added)

    def deserialize(self, saved: t.Any) -> None:
        """Validate and restore a saved queue"""
        queue = self._get_list(saved, "queue")
        if not set(queue).issubset(self.cards):
            raise SerializationError("List contains unknown cards")
        if saved.get("layout") != self.layout:
            raise SerializationError("Hash mismatch")
        self._track("Deserializing")
        self._set_queue(queue)

    def _get_list(self, saved: t.Any, key: str) -> list[str]:
        """Validate a serialized object and get a list[str] member"""
        if len(self) < self.MIN_SERIALIZABLE:
            raise SerializationError("Too few items to load state")
        if not isinstance(saved, dict):
            raise SerializationError("Not a dict")
        if not isinstance(cards := saved.get(key), list):
            raise SerializationError("Not a list")
        if not cards:
            raise SerializationError("Empty list")
        if not all(isinstance(card, str) for card in cards):
            raise SerializationError("Not a list of strings")
        return cards

    def draw(self) -> str:
        """Get the next card"""
        if not self.queue:
            self._set_queue(self.cards)
        self.used = True
        card = self.queue.pop()
        self._track("%d after drawing %r", len(self.queue), card)
        return card

    def peek(self, count: int) -> list[str]:
        """Draw `count` cards without affecting the queue."""
        if count < 1 or count > len(self):
            raise ValueError(f"Cannot draw {count} from {len(self)} cards")

        if count <= len(self.queue):  # Enough lined up
            return self.queue[:count]

        return random.sample(self.cards, count)

    def _set_queue(self, queue: Iterable[str]) -> None:
        """Set the queue"""
        self.queue = list(queue)
        random.shuffle(self.queue)
        self._track("Queue set to %s", self.queue)

    def _track(self, fmt: str, *args) -> None:
        """Print special tracking info if we're in the list"""
        if self.layout in tracked:
            log.info(f"{repr(self.layout)}: {fmt}", *args)


class NoneDeck(Deck):
    """The NONE deck doesn't really have cards, so make the blurb nicer"""

    def __init__(self):
        super().__init__(cards=[""], layout="NONE")

    @property
    def blurb(self) -> str:
        return "NONE"


@dataclasses.dataclass
class Etude:
    """A concrete etude, e.g., 'minor pentatonic'.

    A template string with one or more `Deck` variables.
    """

    template: str
    decks: list[Deck]
    label: Label = dataclasses.field(init=False)
    blurb: str = dataclasses.field(init=False)

    def __post_init__(self):
        blurbs = (deck.blurb for deck in self.decks)
        self.blurb = f"{self.template}={SEP.join(blurbs)}"

        meat = re.sub(r"\s*\[.*\]$", "", self.template)
        labels = (deck.label for deck in self.decks)
        self.label = f"{meat}={SEP.join(labels)}"


@dataclasses.dataclass
class Book:
    """A collection of etudes or pointers to other books"""

    toc: TableOfContents
    sequential: bool = False
    deck: Deck = dataclasses.field(init=False)
    labels: list[Label] = dataclasses.field(init=False)
    shortlist: list[Label] = dataclasses.field(init=False)
    blurb: str = dataclasses.field(init=False)

    def draw(self) -> Entry:
        """Get the next random ToC entry"""
        while (label := self.deck.draw()) not in self.shortlist:
            continue
        return self.toc[self.labels.index(label)]

    def num_active_etudes(self) -> int:
        """Return the number of different etudes currently drawable"""
        return len(self.shortlist)

    @contextlib.contextmanager
    def limit_etudes(self, max_etudes: int | None):
        """Select a shortlist.

        Use as context manager:
        ```
        with book.limit_etudes(3):
            book.draw()
        ```
        """
        previous = self.shortlist
        if max_etudes and 0 < max_etudes < len(self.labels):
            self.shortlist = self.deck.peek(max_etudes)
        try:
            yield
        finally:
            self.shortlist = previous

    def append(self, entry: Entry) -> None:
        """Add an entry to the TOC"""
        self.toc.append(entry)

    def finalize(self, label: Label) -> Deck:
        """(Re)create the deck"""
        self.shortlist = self.labels = [
            entry.label
            for entry in self.toc
            if isinstance(entry, (Etude, BookRef))
        ]
        self.deck = Deck(self.labels, label=label)
        parens = "[]" if self.sequential else "{}"
        self.blurb = (
            f"({self.deck.layout}) "
            f"{parens[0]}{len(self.deck)} of {len(self.labels)}{parens[1]}"
        )
        return self.deck


@dataclasses.dataclass
class BookRef:
    """A reference to a book"""

    book_label: Label
    count: int | None
    book: Book = dataclasses.field(init=False)
    label: Label = dataclasses.field(init=False)
    blurb: str = dataclasses.field(init=False)

    def __post_init__(self):
        if self.count:
            self.label = f"{self.count}@{self.book_label}"
        else:
            self.label = f"={self.book_label}"
        self.blurb = self.label


@dataclasses.dataclass
class Config:
    """The information from the config file"""

    books: Books
    starred: list[Label]


class PracticeMakesPerfect:
    """Practice Makes Perfect"""

    parser: argparse.ArgumentParser
    args: argparse.Namespace

    def parse_command_line(self) -> None:
        """Command-line"""
        parser = argparse.ArgumentParser(description="Practice Makes Perfect")
        parser.add_argument(
            "books",
            metavar="BOOK",
            type=str,
            nargs="*",
            help=(
                "Choose books from this list; specify 'default-config' to "
                "print out the default configuration file"
            ),
        )

        group = parser.add_mutually_exclusive_group()
        group.add_argument(
            "-n",
            "--num-tracks",
            type=int,
            help="Number of tracks (etude × key) to generate",
        )
        group.add_argument(
            "-N",
            "--one-of-each",
            action="store_true",
            help="Make one track per etude in the chosen book",
        )

        parser.add_argument(
            "-i",
            "--max-etudes",
            type=int,
            help="Use at most MAX_ETUDES different etude types",
        )
        parser.add_argument(
            "-m",
            "--multiline",
            action="store_true",
            help="Always print tracks on separate lines",
        )
        parser.add_argument(
            "-d",
            "--debug",
            nargs="?",
            const="-",
            metavar="FILE",
            help="Print lots of debugging information",
        )
        parser.add_argument(
            "-D",
            "--track-decks",
            nargs="+",
            help="Print debugging info on specific deck",
        )
        parser.add_argument(
            "-c",
            "--config",
            type=Path,
            default=Path.home() / ".pmprc",
            help="Path for config file",
        )
        parser.add_argument(
            "-s",
            "--state-file",
            type=Path,
            default=Path.home() / ".pmpstate.plist",
            help="Path for state file",
        )
        parser.add_argument(
            "-r",
            "--report-file",
            type=Path,
            default=Path.home() / ".pmpreport.csv",
            help="Path for report file",
        )
        parser.add_argument(
            "-S",
            "--saveless",
            action="store_true",
            help="Don't save state/report files",
        )
        self.args = parser.parse_args()
        self.parser = parser

    GOOD_SCALE_KEYS = {  # Not the scales, but the keys for those scales
        "ANY": "C‖C♯|D♭‖D‖D♯|E♭‖E‖F‖F♯|G♭‖G‖G♯|A♭‖A‖A♯|B♭‖B",
        "major": "C ‖ C♯|D♭ ‖ D ‖ E♭ ‖ E ‖ F ‖ F♯|G♭ ‖ G ‖ A♭ ‖ A ‖ B♭ ‖ B|C♭",
        "minor": "C ‖ C♯ ‖ D ‖ D♯|E♭ ‖ E ‖ F ‖ F♯ ‖ G ‖ G♯|A♭ ‖ A ‖ A♯|B♭ ‖ B",
        "ionian": "C‖C♯|D♭‖D‖E♭‖E‖F‖F♯|G♭‖G‖A♭‖A‖B♭‖B|C♭",
        "dorian": "D‖D♯|E♭‖E‖F‖F♯‖G‖G♯|A♭‖A‖B♭‖B‖C‖C♯|D♭",
        "phrygian": "E‖E♯|F‖F♯‖G‖G♯‖A‖A♯|B♭‖B‖C‖C♯‖D‖D♯|E♭",
        "lydian": "F‖F♯|G♭‖G‖A♭‖A‖B♭‖B|C♭‖C‖D♭‖D‖E♭‖E|F♭",
        "mixolydian": "G‖G♯|A♭‖A‖B♭‖B‖C‖C♯|D♭‖D‖E♭‖E‖F‖F♯|G♭",
        "aeolian": "A‖A♯|B♭‖B‖C‖C♯‖D‖D♯|E♭‖E‖F‖F♯‖G‖G♯|A♭",
        "locrian": "B‖B♯|C‖C♯‖D‖D♯‖E‖E♯|F‖F♯‖G‖G♯‖A‖A♯|B♭",
    }

    books: Books
    decks: Decks
    config: Config
    state: dict
    reporter: "PmpReporter"

    STATE_VERSION = "v4"

    def main(self) -> None:
        """Practice Makes Perfect"""
        self.parse_command_line()
        self._configure_logging()

        if self.args.books == ["default-config"]:
            print(DEFAULT_CONFIG)
            return

        self._make_basic_decks()
        self._configure()
        self._load_state()
        self._make_all_decks()
        self._restore_state()

        count = None if self.args.one_of_each else self.args.num_tracks
        self._run_book(self._choose_book(), count=count, top=True)
        if not self.args.saveless:
            self._save_state()

    def _configure_logging(self) -> None:
        """Set logging format(s) and level"""
        if self.args.track_decks:
            tracked.update(self.args.track_decks)
        if self.args.debug is None:
            logging.basicConfig(format="INFO: %(message)s", level=logging.INFO)
            return

        if self.args.debug == "-":
            handler: logging.Handler = logging.StreamHandler()
        else:
            handler = logging.FileHandler(self.args.debug)
            handler.setLevel(logging.DEBUG)
        handler.setFormatter(logging.Formatter("[pmp:%(lineno)d] %(message)s"))
        log.addHandler(handler)
        log.setLevel(logging.DEBUG)

    def _run_book(self, book: Book, count: int | None, top=False) -> None:
        """Run any book"""
        if book.sequential:
            self._run_sequential(book, top=top)
        else:
            self._run_plain(book, count)

    def _run_sequential(self, book: Book, top=False) -> None:
        """Run a sequence of items"""
        for idx, entry in enumerate(book.toc):
            if top:
                print("%s[%s]" % ("\n" if idx else "", entry.label))
            if isinstance(entry, Etude):
                print(self._make_track(entry))
            elif isinstance(entry, BookRef):
                self._run_book(entry.book, entry.count)

    def _run_plain(self, book: Book, num_tracks: int | None) -> None:
        """Run a "simple" book, choosing etudes and assigining keys"""
        with book.limit_etudes(self.args.max_etudes):
            if num_tracks is None:
                num_tracks = book.num_active_etudes()
            elif num_tracks == 0:
                num_tracks = len(self.decks["ANY"])
            etudes = self._choose_etudes(book, num_tracks)
        tracks = self._make_tracks(etudes)
        print(self._get_sep(tracks).join(tracks))

    def _choose_etudes(self, book: Book, count: int) -> Iterable[Etude]:
        """Yields chosen etudes.

        Recursion is safe here, since we used `TopologicalSorter`
        to make sure the graph is cycle-free.
        """
        drawn = 0
        while drawn < count:
            self.reporter.in_use(book)
            entry = book.draw()
            if isinstance(entry, Etude):
                yield entry
            elif isinstance(entry, BookRef):
                yield from self._choose_etudes(entry.book, entry.count or 1)
            else:
                continue
            drawn += 1

    def _choose_book(self) -> Book:
        """Pick out a book"""
        if self.args.books:
            labels = self.args.books
            if unknown := set(labels) - set(self.books):
                self._fail(f"Unknown book(s): {' '.join(unknown)}")
        else:
            labels = self.config.starred
        label = random.choice(labels)
        return self.books[label]

    def _make_tracks(self, etude_seq: Iterable[Etude]) -> list[str]:
        """Pick a key (or selection of keys) for each etude"""
        return [self._make_track(etude) for etude in etude_seq]

    def _make_track(self, etude: Etude) -> str:
        """Pick a key for one etude"""
        keys = []
        for deck in etude.decks:
            self.reporter.in_use(deck)
            key = deck.draw()
            if "|" in key:  # Can only come from our pitch classes
                key = random.choice(key.split("|"))
            keys.append(key)

        if "{}" not in etude.template:
            return f"{keys[0]}{etude.template}"

        parts = re.split(r"({})", etude.template)
        ikey = iter(keys)
        return "".join(next(ikey) if part == "{}" else part for part in parts)

    def _get_sep(self, tracks: list[str]) -> str:
        """Return space or newline separator"""
        if self.args.multiline:
            return "\n"
        if any(" " in track for track in tracks):
            return "\n"
        if sum(len(track) for track in tracks) + len(tracks) >= 80:
            return "\n"
        return " "

    def _make_basic_decks(self) -> None:
        """Start `self.decks` with the basic scales"""
        self.decks = {"NONE": NoneDeck()} | {
            label: Deck(layout=label, cards=self._prep_scale(label, cardstr))
            for label, cardstr in self.GOOD_SCALE_KEYS.items()
        }
        log.debug("Key decks: %s", SEP.join(self.decks))

    def _prep_scale(self, label: str, cardstr: str) -> list[str]:
        """Split, strip, and validate a known scale"""
        cards = [card.strip() for card in cardstr.split("‖")]
        notes = [note for card in cards for note in card.split("|")]
        if len(noteset := set(notes)) < len(notes):
            raise ValueError(f"{label}: Not unique: {' '.join(sorted(notes))}")
        note_re = re.compile("[A-G](|♯|♯♯|♭|♭♭|𝄪|𝄫)", re.IGNORECASE)
        if bad := [note for note in notes if not note_re.fullmatch(note)]:
            raise ValueError(f"{label}: Bad {sorted(bad)}")
        if missing := set("ABCDEFG") - noteset:
            raise ValueError(f"{label}: Missing {' '.join(sorted(missing))}")
        return cards

    def _have(self, deck: Deck) -> Deck:
        """Add a deck to our records"""
        return self.decks.setdefault(deck.layout, deck)

    def _configure(self) -> None:
        """Fix configuration files, defaults, etc."""
        try:
            with open(self.args.config, "r", encoding="UTF-8") as fobj:
                self.config = self._parse_config(self.args.config, fobj)
        except (FileNotFoundError, ValueError):
            self.config = self._parse_config("", io.StringIO(DEFAULT_CONFIG))
        self._finalize_books()
        self._start_reporter()

    def _load_state(self) -> None:
        """Read saved state info `self.state`"""
        try:
            with open(self.args.state_file, "rb") as fobj:
                loaded = plistlib.load(fobj)
            self.state = loaded[self.STATE_VERSION]
        except (FileNotFoundError, plistlib.InvalidFileException, KeyError):
            self.state = {}
        if not isinstance(self.state.get("deck"), dict):
            self.state["deck"] = {}

    def _save_state(self) -> None:
        """Save the queue state"""
        saveds = self.state["deck"]
        for layout in saveds.keys() - self.decks.keys():
            self.reporter.deck_gone(layout, saveds.pop(layout))

        used = []
        for layout, deck in self.decks.items():
            try:
                saveds[layout] = deck.serialize()
                used.append(deck.blurb)
            except SerializationError as exc:
                log.debug("Not serializing %s: %s", deck.blurb, exc)
        if used:
            log.debug("Saving %d: %s", len(used), SEP.join(used))
        self.state["debug"] = self.reporter.finish(self.decks, self.books)

        with open(self.args.state_file, "wb") as fobj:
            plistlib.dump(
                {self.STATE_VERSION: self.state},
                fobj,
                sort_keys=False,
            )

    def _make_all_decks(self) -> None:
        """Make sure every deck is created and registered"""
        log.debug("All books: %s", SEP.join(self.books))
        for book in self.books.values():
            for etude in book.toc:
                if isinstance(etude, Etude):
                    etude.decks = [self._have(deck) for deck in etude.decks]

    def _restore_state(self) -> None:
        """Restore states for any eligible deck"""
        class OldSaved(t.NamedTuple):
            """An old deck found in the state file"""
            layout: Layout
            saved: dict[str, t.Any]

        by_layout: dict[Layout, t.Any] = self.state["deck"]
        by_label: dict[Label, OldSaved] = {}
        for layout in by_layout.keys() - self.decks.keys():
            if isinstance(saved := by_layout[layout], dict):
                if isinstance(label := saved.get("label"), str):
                    by_label[label] = OldSaved(layout, saved)

        n_used = 0
        for layout, deck in self.decks.items():
            self.reporter.exists(deck)
            try:
                if saved := by_layout.get(layout):
                    deck.deserialize(saved)
                elif old := by_label.get(deck.label):
                    deck.adapt(old.saved)
                    self.reporter.changed(old.layout, deck)
                if queue := SEP.join(deck.queue):
                    log.debug("Loaded %s -> %s", deck.blurb, queue)
                    n_used += 1
            except SerializationError as exc:
                log.debug("Not restoring %s: %s", deck.blurb, exc)
                by_layout.pop(layout, None)
        log.debug("Resuming %d of %d decks", n_used, len(self.decks))

    def _parse_config(self, filename: Filename, stream: t.TextIO) -> Config:
        """Read configuration file"""
        try:
            labeldecks = {deck.label: deck for deck in self.decks.values()}
            return ConfigParser(labeldecks).parse(filename, stream)
        except BadConfig as err:
            self._fail(str(err))

    def _finalize_books(self) -> None:
        """Check configured graph is legit and prepare all books for action"""
        self.books = self.config.books
        graph = collections.defaultdict(set)
        for label, book in self.books.items():
            for ref in book.toc:
                if isinstance(ref, BookRef):
                    graph[ref.book_label].add(label)
                    ref.book = self.books[ref.book_label]

        if missing := graph.keys() - self.books.keys():
            error = ", ".join(
                f"{label} (used by {', '.join(graph[label])})"
                for label in missing
            )
            self._fail(f"Unknown reference(s): {error}")

        try:
            order = list(graphlib.TopologicalSorter(graph).static_order())
        except graphlib.CycleError as exc:
            self._fail(f"Cyclical configuration: {' -> '.join(exc.args[1])}")

        # The hash of a book depends on the layouts of book refs in the toc
        order.extend(self.books.keys() - set(order))
        for label in reversed(order):
            book = self.books[label]
            book.deck = self._have(book.finalize(label))

    def _start_reporter(self) -> None:
        """Create reporter object"""
        self.reporter = PmpReporter(self.args.report_file)

    def _fail(self, message: str) -> t.NoReturn:
        """Handy wrapper around ArgumentParser's `.fail()` method"""
        self.parser.error(message)


class ConfigParser:
    """Read configuration file"""

    books: Books = {}
    starred: list[Label] = []
    curr: Book | None = None
    line_num: int
    line: str
    mobj: re.Match | None

    def __init__(self, labeldecks: dict[Label, Deck]):
        self.labeldecks = dict(labeldecks)

    def match(self, expr: str) -> bool:
        """Handy wrapper around `re.fullmatch` for the current line"""
        self.mobj = re.fullmatch(expr, self.line)
        return bool(self.mobj)

    def group(self, group: int | str) -> str:
        """Group from previous `self.match()`."""
        assert self.mobj is not None
        return self.mobj.group(group)

    PART_RE = r"(?P<at>(?P<count>[1-9]\d*)?@)?(?P<label>\S+)"

    def parse(self, filename: Filename, stream: t.TextIO) -> "Config":
        """Read configuration file"""
        try:
            return self.do_parse(stream)
        except BadConfig as exc:
            raise BadConfig(f"[{filename}:{self.line_num}] {exc}") from exc

    def do_parse(self, stream: t.TextIO) -> "Config":
        """The actual reading function"""
        for self.line_num, line in enumerate(stream, 1):
            self.line = re.sub(r"\s*(#.*)?$", "", line)

            if self.match(r"([^:|]+):=(.*)"):
                self.add_deck(
                    label=self.group(1).strip(),
                    keys=self.group(2).strip(),
                )
            elif self.match(r"([*]?)(\S[^:]*):"):
                self.enter_book(
                    label=self.group(2).strip(),
                    star=self.group(1),
                )
            elif self.match(r"\s+([^:]*):\s+(.*)"):
                self.add_etude(
                    template=self.group(1).strip(),
                    description=self.group(2).strip(),
                )
            elif self.match(f"\\s+{self.PART_RE}\\s*") and self.group("at"):
                self.add_ref()
            elif self.match(r"(?P<label>[^=]*)\s*=\s*{(?P<parts>[^}]*)}"):
                self.add_one_liner(sequential=False)
            elif self.match(r"(?P<label>[^=]*)\s*=\s*\[(?P<parts>[^]]*)\]"):
                self.add_one_liner(sequential=True)
            elif not self.match(r""):
                raise BadConfig(f"Bad line: {repr(self.line)}")

        return Config(
            books=self.books,
            starred=self.starred or list(self.books),
        )

    def enter_book(self, label: Label, star: str) -> None:
        """Found a book line"""
        if label in self.books:
            raise BadConfig(f"Duplicate book: {repr(label)}")

        self.books[label] = self.books[label] = self.curr = Book([])
        if star == "*":
            self.starred.append(label)

    def add_deck(self, label: str, keys: str) -> None:
        """Found a deck line, e.g.,

        easy-major := C|F|G
        """
        if label in self.labeldecks:
            raise BadConfig(f"Duplicate deck: {repr(label)}")

        cards = [key.strip() for key in keys.split("|")]
        self.labeldecks[label] = Deck(label=label, cards=cards)

    def add_etude(self, template: str, description: str) -> None:
        """Found an etude line"""
        if self.curr is None:
            raise BadConfig("Bookless etude")

        if template and template[0] in "'\"" and template[-1] == template[0]:
            template = template[1:-1]

        parts = self._description_to_parts(description)
        num_placeholders = len(re.findall(r"{}", template)) or 1
        if len(parts) != num_placeholders:
            raise BadConfig("Placeholder mismatch")

        decks: list[Deck] = []
        for part in parts:
            try:
                decks.append(self.labeldecks[part])
            except KeyError:
                decks.append(Deck([key.strip() for key in part.split("|")]))
        self.curr.append(Etude(template=template, decks=decks))

    def _description_to_parts(self, description: str) -> list[str]:
        """Parse an etude description"""
        if not re.fullmatch(r"({[^}]*}\s*)+", description):
            return [description]
        return [part[1:-1] for part in re.findall(r"{[^{}]*}", description)]

    def add_ref(self) -> None:
        """Add book reference line (in self.mobj)"""
        if self.curr is None:
            raise BadConfig("Bookless reference")
        assert self.mobj is not None
        self.add_ref_to(self.curr.toc, self.mobj)

    def add_one_liner(self, sequential: bool) -> None:
        """A one-liner is in `self.group("label" | "parts")`"""
        label = self.group("label").strip()
        starred = label.startswith("*")
        if starred:
            label = label[1:]
        if label in self.books:
            raise BadConfig(f"Duplicate book {repr(label)}")

        parts = self.group("parts").split()
        if not parts:
            raise BadConfig(f"Empty one-liner {label}")

        toc: TableOfContents = []
        for part in parts:
            if mobj := re.fullmatch(self.PART_RE, part):
                self.add_ref_to(toc, mobj)
            else:
                raise BadConfig(f"Bad {repr(part)}")
        self.books[label] = Book(toc=toc, sequential=sequential)

        if starred:
            self.starred.append(label)

    def add_ref_to(self, toc: TableOfContents, mobj: re.Match) -> None:
        """Add book reference to a given TOC"""
        nstr = mobj.group("count")
        if nstr:
            count = int(nstr)
        elif mobj.group("at"):
            count = 1
        else:
            count = None
        toc.append(BookRef(count=count, book_label=mobj.group("label")))


class PmpReporter:
    """In charge of debug and statistics"""

    path: Path
    debug: dict[str, t.Any]
    report: dict[Layout, dict]
    now: str
    then: str

    def __init__(self, report_file: Path):
        self.now = str(now := datetime.date.today())
        self.then = str(now - datetime.timedelta(days=30))
        self.debug = {"gone": {}}
        self.path = report_file
        self._read()

    def _read(self) -> None:
        """Read the old report, or create an empty one"""
        try:
            with open(self.path, encoding="utf-8", newline="") as csvfo:
                reader = csv.DictReader(csvfo)
                self.report = {row["layout"]: row for row in reader}
        except (FileNotFoundError, ValueError, KeyError, csv.Error):
            self.report = {}
        log.debug("Read %s (N = %d)", self.path, len(self.report))

    def _row(self, label: Label, layout: Layout) -> dict:
        """Get the report row for a deck"""
        try:
            return self.report[layout]
        except KeyError:
            self.report[layout] = row = {"label": label, "layout": layout}
            return row

    def _deck_row(self, deck: Deck) -> dict:
        """Get the report row for a deck"""
        return self._row(label=deck.label, layout=deck.layout)

    def exists(self, deck: Deck) -> None:
        """Note that a deck exists"""
        row = self._update(self._row(deck.label, deck.layout), deck)
        row.setdefault("since", self.now)

    def in_use(self, drawable: Deck | Book) -> None:
        """Note that something has been used in the present run"""
        deck = drawable if isinstance(drawable, Deck) else drawable.deck
        row = self._deck_row(deck)
        self._update(row, deck, used=self.now)
        try:
            row["drawn"] = int(row["drawn"]) + 1
        except (KeyError, ValueError):
            row["drawn"] = 1

    def changed(self, old_layout: Layout, deck: Deck) -> None:
        """A deck has changed its layout"""
        if row := self.report.pop(old_layout, None):
            if (layout := deck.layout) not in self.report:
                self.report[layout] = self._update(row, deck, layout=layout)

    def _update(self, row: dict, deck: Deck, **kwargs) -> dict:
        """Update some key fields in a row"""
        row["length"] = len(deck)
        row["blurb"] = deck.blurb
        row.pop("gone", None)
        row.update(kwargs)
        return row

    def deck_gone(self, layout: Layout, serialized: dict) -> None:
        """A deck serialized in a previous run is no more."""
        row = self._row(layout=layout, label=serialized.get("label", "N/A"))
        row["gone"] = self.now
        self.debug["gone"] = serialized
        try:
            row["blurb"] = description = serialized["blurb"]
        except (KeyError, TypeError):
            description = layout
        log.debug("%s is gone", description)

    def finish(self, decks: Decks, books: Books) -> dict[str, str]:
        """Make the stuff that goes in the debug part of the state"""
        self._write()
        self.debug["n_decks"] = len(decks)
        self.debug["decks"] = {
            layout: deck.blurb for layout, deck in decks.items()
        }
        self.debug["n_books"] = len(books)
        self.debug["books"] = {
            f"{label} {book.blurb}": [entry.blurb for entry in book.toc]
            for label, book in books.items()
        }
        return self.debug

    def _write(self) -> None:
        """Write the updated report"""
        rows = [
            row
            for row in self.report.values()
            if (row.get("used") or row.get("gone") or self.then) >= self.then
        ]
        colset = set.union(*[set(row) for row in rows])
        cols = ["label", "layout"] + sorted(colset - {"label", "layout"})

        log.debug("Write %s (N = %d)", self.path, len(self.report))
        with open(self.path, "w", encoding="utf-8", newline="") as csvfo:
            rows = sorted(rows, key=lambda row: row["label"])
            writer = csv.DictWriter(csvfo, fieldnames=cols)
            writer.writeheader()
            for row in rows:
                writer.writerow(row)


if __name__ == "__main__":
    PracticeMakesPerfect().main()
