#!/usr/bin/env python3
"""Practice Makes Perfect"""
import argparse
import dataclasses
import hashlib
import graphlib
import io
import logging
from pathlib import Path
import plistlib
import random
import re

from collections import defaultdict
from collections.abc import Iterable
from collections.abc import Sequence
from typing import NamedTuple
from typing import NoReturn
from typing import TextIO
from typing import TypeAlias
from typing import TypeVar

# TO DO:
# - Fix the name/mnem thing
# - Support {}->[]
# - "easy-major := C|F|G" etc., a sort of mnem-mnem


T = TypeVar("T")
Playable: TypeAlias = "Etude | BookRef"
TableOfContents: TypeAlias = list[Playable]
PitchClass: TypeAlias = Sequence[str]


@dataclasses.dataclass
class Deck:
    """A deck of strings"""
    cards: list[str]
    queue: list[str] = dataclasses.field(default_factory=list)
    mnem: str = ""
    used: bool = False

    def __post_init__(self):
        if not self.mnem:
            self.mnem = "|".join(sorted(self.cards))

    def __len__(self):
        return len(self.cards)

    def restore(self, queue: object) -> bool:
        """Validate and restore a saved queue"""
        if not isinstance(queue, list):
            return False
        if not queue:
            return False
        if not all(isinstance(card, str) for card in queue):
            return False
        cards = set(queue)
        if len(cards) != len(queue):
            return False
        if not set(self.cards).issubset(self.cards):
            return False
        self.queue = queue
        return True

    def draw(self) -> str:
        """Get the next card"""
        if not self.queue:
            self.queue = list(self.cards)
            random.shuffle(self.queue)
        self.used = True
        return self.queue.pop()


@dataclasses.dataclass
class Etude:
    """A concrete etude, e.g., 'minor pentatonic'"""
    name: str
    decks: list[Deck]


@dataclasses.dataclass
class Book:
    """A collection of etudes or pointers to other books"""
    toc: TableOfContents
    sequential: bool = False
    deck: Deck = dataclasses.field(init=False)
    names: list[str] = dataclasses.field(init=False)
    cap: list[str] = dataclasses.field(init=False)

    def __hash__(self) -> int:
        hashable = "\x00".join(self.names)
        return int(hashlib.sha256(hashable.encode()).hexdigest(), 16)

    def draw(self) -> Playable:
        """Get the next random playable"""
        while True:
            name = self.deck.draw()
            if name in self.cap:
                break
        return self.toc[self.names.index(name)]

    def set_cap(self, cap: list[str]) -> None:
        """Set cap"""
        assert cap and set(cap).issubset(self.names)
        self.cap = cap

    def append(self, playable: Playable):
        """Add an entry to the TOC"""
        self.toc.append(playable)

    def make_deck(self, mnem="") -> Deck:
        """(Re)create the deck"""
        self.cap = self.names = [entry.name for entry in self.toc]
        self.deck = Deck(self.names, mnem=mnem)
        return self.deck


class BookRef(NamedTuple):
    """A reference to a book"""
    name: str
    num_etudes: int | None = None


DEFAULT_CONFIG = """
note:  # Just pick a note
  : ANY

scale:  # Play a scale
  -major: major
  -major: major  # Duplicate an entry to give it more weight
  -natural minor: minor
  -harmonic minor: minor
  -melodic minor: minor

mode:  # Play a mode
  ' ionian': ionian
  ' dorian': dorian
  ' phrygian': phrygian
  ' lydian': lydian
  ' mixolydian': mixolydian
  ' aeolian': aeolian
  ' locrian': locrian

arp:  # Play an arpeggio
  M: major
  m: minor
  ⁷: major
  m⁷: minor
  M⁷: major
  ' major pentatonic': major
  ' minor pentatonic': minor
"""


class Configuration(NamedTuple):
    """The information from the config file"""
    books: dict[str, Book]
    starred: list[str]


# pylint: disable-next=too-many-instance-attributes
class PracticeMakesPerfect:
    """Practice Makes Perfect"""

    parser: argparse.ArgumentParser
    args: argparse.Namespace

    def parse_command_line(self) -> None:
        """Command-line"""
        parser = argparse.ArgumentParser(
            description="Practice Makes Perfect"
        )
        parser.add_argument(
            "books",
            metavar="BOOK",
            type=str,
            nargs="*",
        )

        group = parser.add_mutually_exclusive_group()
        group.add_argument(
            "-n",
            "--num-tracks",
            type=int,
        )
        group.add_argument(
            "-N",
            "--one-of-each",
            action="store_true",
        )

        parser.add_argument(
            "-i",
            "--max-etudes",
            type=int,
        )
        parser.add_argument(
            "-m",
            "--multiline",
            action="store_true",
        )
        parser.add_argument(
            "-v",
            "--verbose",
            action="store_true",
        )
        parser.add_argument(
            "-d",
            "--debug",
            action="store_true",
        )
        parser.add_argument(
            "-c",
            "--config",
            type=Path,
            default=Path.home() / ".pmprc",
        )
        parser.add_argument(
            "-C",
            "--state-file",
            type=Path,
            default=Path.home() / ".pmpstate.plist",
        )
        parser.add_argument(
            "-s",
            "--saveless",
            action="store_true",
            help="Don't save state file",
        )
        self.args = parser.parse_args()
        self.parser = parser

    _LETTERS = "CDEFGAB"
    _MODES = (
        "ionian",
        "dorian",
        "phrygian",
        "lydian",
        "mixolydian",
        "aeolian",
        "locrian",
    )

    PITCH_CLASSES: list[PitchClass] = [
        ("C",),
        ("C♯", "D♭"),
        ("D",),
        ("D♯", "E♭"),
        ("E",),
        ("F",),
        ("F♯", "G♭"),
        ("G",),
        ("G♯", "A♭"),
        ("A",),
        ("A♯", "B♭"),
        ("B",),
    ]

    SCALE_FIX: dict[str, dict[str, str]] = {
        "NONE": {},
        "ANY": {},
        "major": {
            "G♯": "A♭",
            "D♯": "E♭",
            "A♯": "B♭",
        },
        "minor": {
            "G♭": "F♯",
            "D♭": "C♯",
            "A♭": "G♯",
        }
    }

    all_books: dict[str, Book]
    decks: dict[str, Deck]
    config: Configuration
    log: logging.Logger
    state: dict
    book_name: str

    STATE_VERSION = "v3"
    MIN_SAVABLE = 3

    def main(self) -> None:
        """Practice Makes Perfect"""
        self.parse_command_line()
        self.configure_logging()

        if self.args.books == ["default-config"]:
            print(DEFAULT_CONFIG)
            return

        self.make_mode_decks()
        self.configure()
        self.load_state()
        self.make_all_decks()

        self.book_name = self.choose_book()
        self.run_book(
            self.book_name,
            None if self.args.one_of_each else self.args.num_tracks,
            spaced=True,
        )
        if not self.args.saveless:
            self.save_state()

    def configure_logging(self):
        """Set logging format and level"""
        if self.args.debug:
            level = logging.DEBUG
        else:
            level = logging.INFO
        logging.basicConfig(
            format="%(message)s",
            datefmt="[%X]",
            level=level,
        )
        self.log = logging.getLogger("lgdl")

    def run_book(self, name: str, num_tracks: int | None, spaced=False):
        """Run any book"""
        book = self.all_books[name]
        if book.sequential:
            self.run_agenda(book, spaced=spaced)
        else:
            self.book_name = name
            self.run_plain(book, num_tracks)

    def run_agenda(self, book: Book, spaced: bool) -> None:
        """Run an agenda: A sequence of books"""
        for entry in book.toc:
            if isinstance(entry, Etude):
                print(self.make_track(entry))
            else:
                ref: BookRef = entry
                self.run_book(ref.name, ref.num_etudes)
            if spaced:
                print("")

    def run_plain(self, book: Book, num_tracks: int | None):
        """Run a "simple" book, choosing etudes and assigining keys"""
        names = book.names
        if self.args.max_etudes:
            num_names = min(self.args.max_etudes, len(names))
            names = random.sample(names, num_names)

        if num_tracks is None:
            num_tracks = len(names)
        elif num_tracks == 0:
            num_tracks = len(self.PITCH_CLASSES)

        if self.args.verbose:
            print(f"[{self.book_name} × {num_tracks}]")

        book.set_cap(names)
        etude_seq = self.choose_etudes(book, num_tracks)
        track_seq = self.make_tracks(etude_seq)

        print(self.get_sep(track_seq).join(track_seq))

    def choose_etudes(
        self,
        book: Book,
        count: int
    ) -> Iterable[Etude]:
        """Yields chosen etudes"""
        assert not book.sequential
        for _ in range(count):
            entry = book.draw()
            if isinstance(entry, Etude):
                yield entry
            else:
                yield from self.choose_etudes(
                    self.all_books[entry.name],
                    entry.num_etudes or 1
                )

    def choose_book(self) -> str:
        """Pick out a book"""
        if self.args.books:
            books = self.args.books
            if (unknown := set(books) - set(self.all_books)):
                self.fail(f"Unknown book(s): {' '.join(unknown)}")
        else:
            books = self.config.starred
            if len(books) > 1:
                self.args.verbose = True
        return random.choice(books)

    def make_tracks(
        self,
        etude_seq: Iterable[Etude],
    ) -> list[str]:
        """Pick a key for each etude"""
        return [
            self.make_track(etude)
            for etude in etude_seq
        ]

    def make_track(self, etude: Etude) -> str:
        """Pick a key for one etude"""
        keys = []
        for deck in etude.decks:
            key = deck.draw()
            if "|" in key:  # Can only come from our pitch classes
                key = random.choice(key.split("|"))
            keys.append(key)

        if "{}" in etude.name:
            return "".join((
                keys.pop(0) if part == "{}" else part
                for part in re.split(r"({})", etude.name)
            ))

        return f"{keys[0]}{etude.name}"

    def get_sep(self, tracks: list[str]) -> str:
        """Return space or newline separator"""
        if self.args.multiline:
            return "\n"
        if any(" " in track for track in tracks):
            return "\n"
        if sum(len(track) for track in tracks) + len(tracks) >= 80:
            return "\n"
        return " "

    def make_mode_decks(self) -> None:
        """Start `self.decks` with the Greek modes and their hypotheticals"""
        model = self.SCALE_FIX["major"]
        mapping: dict[str, str]

        for offset, mode in enumerate(self._MODES):
            mapping = {
                note: self._LETTERS[(idx + offset) % len(self._LETTERS)]
                for idx, note in enumerate(self._LETTERS)
            }

            def modify(note: str) -> str:
                try:
                    return mapping[note[0]] + note[1:]
                except KeyError:
                    return note

            self.SCALE_FIX[mode] = {
                modify(key): modify(value)
                for key, value in model.items()
            }

        self.decks = {
            scale: Deck(
                [
                    "|".join((fixes.get(note, note) for note in pitch_class))
                    for pitch_class in self.PITCH_CLASSES
                ],
                mnem=scale,
            )
            for scale, fixes in self.SCALE_FIX.items()
        }
        self.decks["NONE"] = Deck([""], mnem="NONE")
        self.log.debug("Key decks: %s", list(self.decks))

    def configure(self) -> None:
        """Fix configuration files, defaults, etc."""
        try:
            with open(self.args.config, "r", encoding="UTF-8") as fobj:
                self.config = self.parse_config(fobj)
        except (FileNotFoundError, ValueError):
            self.config = self.parse_config(io.StringIO(DEFAULT_CONFIG))
        self.all_books = self.config.books
        self.check_refs()

    def load_state(self) -> None:
        """Read saved state info `self.state`

        Sets `self.state`.
        """
        try:
            with open(self.args.state_file, "rb") as fobj:
                loaded = plistlib.load(fobj)
            self.state = loaded[self.STATE_VERSION]
        except (FileNotFoundError, plistlib.InvalidFileException, KeyError):
            self.state = {}
        self.state.setdefault("deck", {})

    def save_state(self) -> None:
        """Save the queue state"""
        for key in list(self.state["deck"]):
            if not (deck := self.decks.get(key)) or not deck.queue:
                self.log.debug("%r is %s", key, "done" if deck else "gone")
                del self.state["deck"][key]

        used = []
        for key, deck in self.decks.items():
            if deck.used and deck.queue and len(deck) >= self.MIN_SAVABLE:
                self.state["deck"][key] = deck.queue
                used.append(key)
        self.log.debug("Saving %d deck(s): %s", len(used), " ".join(used))

        with open(self.args.state_file, "wb") as fobj:
            plistlib.dump(
                {self.STATE_VERSION: self.state},
                fobj,
            )

    def make_all_decks(self) -> None:
        """Prepare randomizers"""
        # Make sure all etude and book decks are registered
        self.log.debug("All books: %s", list(self.all_books))
        for name, book in self.all_books.items():
            self.decks[name] = book.make_deck(name)
            for etude in book.toc:
                if not isinstance(etude, Etude):
                    continue
                for idx, deck in enumerate(etude.decks):
                    if deck.mnem in self.decks:
                        etude.decks[idx] = self.decks[deck.mnem]
                    else:
                        self.decks[deck.mnem] = deck

        # Restore states for any eligible deck
        queues = self.state["deck"]
        n_used = 0
        for mnem, deck in self.decks.items():
            if (queue := queues.get(mnem)) is None:
                continue
            if len(deck) >= self.MIN_SAVABLE and deck.restore(queue):
                self.log.debug(
                    "Loaded %s -> (%d of %d) %s",
                    mnem,
                    len(deck.queue),
                    len(deck),
                    deck.queue,
                )
                n_used += 1
            else:
                self.log.debug("Forgetting saved state for %s", mnem)

        self.log.debug(">> %d of %d decks", n_used, len(self.decks))

    def parse_config(self, stream: TextIO) -> Configuration:
        """Read configuration file"""
        try:
            return ConfigParser(self.decks).parse(stream)
        except BadConfig as err:
            self.fail(str(err))
            raise err  # Won't happen, just to appease pyright

    def check_refs(self) -> None:
        """Check configured graph is legit"""
        graph = defaultdict(set)
        for name, book in self.all_books.items():
            for ref in book.toc:
                if not isinstance(ref, BookRef):
                    continue
                other = ref.name
                if self.all_books[other].sequential and not book.sequential:
                    self.fail(f"{name}{{}}->{other}[] not supported")
                graph[other].add(name)

        if (missing := graph.keys() - self.all_books.keys()):
            error = ", ".join(
                f"{name} (used by {', '.join(graph[name])})"
                for name in missing
            )
            self.fail(f"Unknown reference(s): {error}")

        try:
            topo = graphlib.TopologicalSorter(graph)
            topo.prepare()
        except graphlib.CycleError as exc:
            self.fail(f"Cyclical configuration: {' -> '.join(exc.args[1])}")

    def fail(self, message: str) -> NoReturn:
        """Handy wrapper around ArgumentParser's `.fail()` method"""
        self.parser.error(message)


class BadConfig(ValueError):
    """Problem with config file"""


class ConfigParser:
    """Read configuration file"""
    books: dict[str, Book] = {}
    starred: list[str] = []
    curr: Book | None = None
    line_num: int
    line: str
    mobj: re.Match | None

    def __init__(self, known_decks: dict[str, Deck]):
        self.known_decks = known_decks

    def match(self, expr: str) -> bool:
        """Handy wrapper around `re.fullmatch` for the current line"""
        self.mobj = re.fullmatch(expr, self.line)
        return bool(self.mobj)

    def group(self, group: int | str) -> str:
        """Group from previous `self.match()`."""
        assert self.mobj is not None
        return self.mobj.group(group)

    PART_RE = r"(?P<at>(?P<num>[1-9]\d*)?@)?(?P<book>\S+)"

    def parse(self, stream: TextIO) -> "Configuration":
        """Read configuration file"""
        for self.line_num, line in enumerate(stream, 1):
            self.line = re.sub(r"\s*(#.*)?$", "", line)

            if self.match(r"([*]?)(\S[^:]*):"):
                self.enter_book(name=self.group(2).strip(), star=self.group(1))
            elif self.match(r"\s+([^:]*):\s+(.*)"):
                self.add_etude(
                    name=self.group(1).strip(),
                    description=self.group(2).strip(),
                )
            elif self.match(f"\\s+{self.PART_RE}\\s*") and self.group("at"):
                self.add_ref()
            elif self.match(r"(?P<name>[^=]*)\s*=\s*{(?P<parts>[^}]*)}"):
                self.add_one_liner(sequential=False)
            elif self.match(r"(?P<name>[^=]*)\s*=\s*\[(?P<parts>[^]]*)\]"):
                self.add_one_liner(sequential=True)
            elif not self.match(r""):
                raise BadConfig(f"Bad line {self.line_num}: {repr(self.line)}")

        return Configuration(
            books=self.books,
            starred=self.starred or list(self.books),
        )

    def enter_book(self, name: str, star: str) -> None:
        """Found a book line"""
        if name in self.books:
            raise BadConfig(f"Duplicate name: {repr(name)}")

        self.books[name] = self.books[name] = self.curr = Book([])
        if star == "*":
            self.starred.append(name)

    def add_etude(self, name: str, description: str) -> None:
        """Found an etude line"""
        if self.curr is None:
            raise BadConfig(f"Bookless etude in line {self.line_num}")

        if name and name[0] in "'\"" and name[-1] == name[0]:
            name = name[1:-1]

        if re.fullmatch(r"({[^}]*}\s*)+", description.strip()):
            parts = [
                substr[1:-1]
                for substr in re.findall(r"{[^{}]*}", description)
            ]
        else:
            parts = [description]

        num_placeholders = len(re.findall(r"{}", name)) or 1
        if len(parts) != num_placeholders:
            raise BadConfig(f"Placeholder mismatch in line {self.line_num}")

        decks: list[Deck] = []
        for part in parts:
            try:
                decks.append(self.known_decks[part])
            except KeyError:
                decks.append(Deck([key.strip() for key in part.split("|")]))
        self.curr.append(Etude(name=name, decks=decks))

    def add_ref(self) -> None:
        """Add book reference line (in self.mobj)"""
        if self.curr is None:
            raise BadConfig(f"Bookless reference in line {self.line_num}")
        assert self.mobj is not None
        self.add_ref_to(self.curr.toc, self.mobj)

    def add_one_liner(self, sequential: bool) -> None:
        """A one-liner is in `self.group("name" | "parts")`"""
        name = self.group("name").strip()
        if (starred := name.startswith("*")):
            name = name[1:]
        if name in self.books:
            raise BadConfig(f"Duplicate {repr(name)} (line {self.line_num})")

        parts = self.group("parts").split()
        if not parts:
            raise BadConfig(f"Empty one-liner {name} (line {self.line_num})")

        toc: TableOfContents = []
        for part in parts:
            if not (mobj := re.fullmatch(self.PART_RE, part)):
                raise BadConfig(f"Bad {repr(part)} (line {self.line_num})")
            self.add_ref_to(toc, mobj)
        self.books[name] = Book(toc=toc, sequential=sequential)

        if starred:
            self.starred.append(name)

    def add_ref_to(self, toc: TableOfContents, mobj: re.Match):
        """Add book reference to a give TOC"""
        if (nstr := mobj.group("num")):
            num = int(nstr)
        elif mobj.group("at"):
            num = 1
        else:
            num = None
        toc.append(BookRef(num_etudes=num, name=mobj.group("book")))


if __name__ == "__main__":
    PracticeMakesPerfect().main()
