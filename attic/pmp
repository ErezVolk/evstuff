#!/usr/bin/env python3
"""Practice Makes Perfect

Assuming you have more scales, drills, licks and etudes to practice regularly
than you have time for each day, this utility will present them to you in
random order. Sort of like spaced repetition, only _it never ends_.


About the code:
There are two different types of object identifiers:
- `x.label` is the name used by other parts of the system (references, config).
- `x.layout` is used to identify saved states.

Sometimes (e.g., in "well-known" things like the major scale), the label and
the layout are equal and human-readable ("major", etc.). Other times, the
layout is a hash of the different options, and the label is the reference
name.

Most objects also have `x.blurb`, which is for display purposes only.
"""
import argparse
import collections
from collections.abc import Iterable
import csv
import dataclasses
import datetime
import graphlib
import hashlib
import io
import logging
from pathlib import Path
import plistlib
import random
import re
import typing as t
import unicodedata as ud


DEFAULT_CONFIG = """
note:  # Just pick a note
  : ANY

scale:  # Play a scale
  -major: major
  -natural minor: minor

arp:  # Play an arpeggio
  M: major
  m: minor
  ⁷: major
  m⁷: minor
  M⁷: major

form:
  Blues in {}: C|F|G
  {} on the {} string: {@arp} {oneString}
  Page {} in The Book: {<1,3-5,9-100>}

oneString := E|A|D|G
"""


__TODO__ = """
- "ANY := C‖C#|Db‖D#|Eb‖...‖B" "major := C#|Db‖...‖B"
- Visitor pattern (on_etude=, on_ref=)
- Build modes, e.g., "altered := minor+7", then we can only predefine major
- A UI to mark what was done? With a metronome? And a drone?
"""


SEP = " ‖ "
Filename: t.TypeAlias = str | Path
Label = t.NewType("Label", str)
Layout = t.NewType("Layout", str)
Entry: t.TypeAlias = "Etude | BookRef"
Books: t.TypeAlias = dict[Label, "Book"]
Decks: t.TypeAlias = dict[Layout, "Deck"]
StringDict: t.TypeAlias = dict[str, t.Any]

log = logging.getLogger("pmp")
tracked: set[Layout] = set()


class BadConfig(ValueError):
    """Problem with config file"""


class SerializationError(ValueError):
    """Raised internally when a deck cannot be restored."""


class Deck:
    """A deck of strings"""

    cards: tuple[str, ...]
    queue: list[str] = []
    label: Label
    layout: Layout
    drawn: int = 0
    flipped: int = 0
    old_layout: Layout | None = None

    MIN_SERIALIZABLE = 3
    SERIALIZEES = ("blurb", "label", "layout", "cards", "queue")

    def __init__(self, cards: Iterable[str], label="", layout=""):
        assert not label or not layout, f"Either {label!r} or {layout!r}"
        self.cards = tuple(cards)
        assert self.cards, f"{label or layout!r} Empty decks not supported"
        if layout:
            self.label = Label(layout)
            self.layout = Layout(layout)
        else:
            self.label = Label(label or "|".join(self.cards))
            hashobj = hashlib.sha256("\0".join(sorted(self.cards)).encode())
            self.layout = Layout(f":{hashobj.hexdigest()[:8]}:")
        self._set_queue(self.cards)

    def __len__(self) -> int:
        return len(self.cards)

    @property
    def blurb(self) -> str:
        """A description of the deck in its current state"""
        if self.label == self.layout:
            return f"{self.label} @{len(self.queue)}/{len(self)}"
        return f"{self.label!r} {self.layout} @{len(self.queue)}/{len(self)}"

    def serialize(self) -> StringDict:
        """Serialize for the state file"""
        if not self.drawn:
            raise SerializationError("Never drawn")
        if len(self) < self.MIN_SERIALIZABLE:
            raise SerializationError("Too small")
        return {key: getattr(self, key) for key in self.SERIALIZEES}

    def adapt(self, saved: StringDict) -> None:
        """When a user changes some cards in a deck (and thus the layout) but
        keeps its name, we may be able to salvage it."""
        theirs = set(self._get_list(saved, "cards"))
        ours = set(self.cards)
        if len(theirs & ours) < self.MIN_SERIALIZABLE:
            raise SerializationError("Not enough shared cards to adapt")
        added = ours - theirs
        gone = theirs - ours
        log.debug("Adapting %s +%s -%s", self.label, list(added), list(gone))
        if not (queued := set(self._get_list(saved, "queue")) & ours):
            raise SerializationError("No shared cards in queue")
        self._set_queue(queued & added)
        if isinstance(old_layout := saved.get("layout"), str):
            self.old_layout = Layout(old_layout)

    def deserialize(self, saved: t.Any) -> None:
        """Validate and restore a saved queue"""
        assert saved.get("layout") == self.layout, "Who called this?"
        queue = self._get_list(saved, "queue")
        if unknown := set(queue) - set(self.cards):
            raise SerializationError(f"Saved queue contains unknown {unknown}")
        self._track("Deserializing")
        self._set_queue(queue)

    def _get_list(self, saved: t.Any, key: str) -> list[str]:
        """Validate a serialized object and get a list[str] member"""
        if len(self) < self.MIN_SERIALIZABLE:
            raise SerializationError("Too few items to load state")
        if not isinstance(saved, dict):
            raise SerializationError(f"{key}: Not a dict")
        if not isinstance(cards := saved.get(key), list):
            raise SerializationError(f"{key}: Not a list")
        if not cards:
            raise SerializationError(f"{key}: Empty list")
        if not all(isinstance(card, str) for card in cards):
            raise SerializationError(f"{key}: Not a list of strings")
        return cards

    def predraw(self, count: int) -> None:
        """Try and make sure the next `count` cards won't have dupes"""
        if count > len(self.queue) > 0:
            lineup = list(set(self.cards) - set(self.queue))
            random.shuffle(lineup)
            self._track("Adding %s to %s", lineup, self.queue)
            self.queue = list(self.queue + lineup)

    def draw(self) -> str:
        """Get the next card"""
        self.ping()
        if not self.queue:
            self.flipped += 1
            self._set_queue(self.cards)
        card = self.queue.pop(0)
        self._track("%d after drawing %r", len(self.queue), card)
        return card

    def ping(self) -> None:
        """Notify the deck it's being used"""
        self.drawn += 1

    def _set_queue(self, queue: Iterable[str]) -> None:
        """Set the queue"""
        self.queue = list(queue)
        random.shuffle(self.queue)
        self._track("Queue set to %s", self.queue)

    def _track(self, fmt: str, *args) -> None:
        """Print special tracking info if we're in the list"""
        if self.layout in tracked:
            log.info(f"{self.layout!r}: {fmt}", *args)


class RangeDeck(Deck):
    """Random choice from  range of numbers, e.g., "1,3-4,15-50"."""

    def __init__(self, description: str) -> None:
        numbers = set()
        for rstr in description.split(","):
            subs = [int(sub) for sub in rstr.split("-")]
            try:
                numbers.update(range(subs[0], subs[1] + 1))
            except IndexError:
                numbers.add(subs[0])
        super().__init__(map(str, numbers), layout=description)


class NoneDeck(Deck):
    """The NONE deck doesn't really have cards, so make the blurb nicer"""

    def __init__(self) -> None:
        super().__init__([""], layout="NONE")

    def __repr__(self) -> str:
        return "<NoneDeck>"

    def serialize(self) -> StringDict:
        """Do NOT serialize"""
        raise SerializationError("What would be the point?")

    def draw(self) -> str:
        """Override `Deck.draw()` so we don't count these."""
        return ""

    @property
    def blurb(self) -> str:
        return "NONE"


@dataclasses.dataclass
class Etude:
    """A concrete etude, e.g., '{}-minor pentatonic'.

    A template string with one or more `Deck` variables.
    """

    template: str
    decks: list[Deck]
    label: Label = dataclasses.field(init=False)
    blurb: str = dataclasses.field(init=False)

    def __post_init__(self) -> None:
        blurbs = (deck.blurb for deck in self.decks)
        self.blurb = f"{self.template}={SEP.join(blurbs)}"

        meat = re.sub(r"\s*\[.*\]$", "", self.template)
        labels = (deck.label for deck in self.decks)
        self.label = Label(f"{meat}={SEP.join(labels)}")


@dataclasses.dataclass
class Book:
    """A collection of etudes or pointers to other books"""

    label: Label
    sequential: bool = False

    toc: list[Entry] = dataclasses.field(default_factory=list, init=False)
    deck: Deck = dataclasses.field(init=False)
    labels: list[Label] = dataclasses.field(init=False)

    def draw_all(self) -> Iterable[Entry]:
        """Yield all entries in order, one by one"""
        self.deck.ping()
        yield from self.toc

    def draw_n(self, count: int) -> Iterable[Entry]:
        """Yield `count` random entries."""
        self.deck.predraw(count)
        for _ in range(count):
            yield self.toc[self.labels.index(Label(self.deck.draw()))]

    def finalize(self) -> Deck:
        """(Re)create the deck"""
        self.labels = [entry.label for entry in self.toc]
        self.deck = Deck(cards=self.labels, label=self.label)
        return self.deck

    @property
    def blurb(self) -> str:
        """Book-level blurb"""
        return f"{self.deck.blurb} {'[]' if self.sequential else '{}'}"

    def entry_blurbs(self) -> list[str]:
        """Blurbs of the entries"""
        return [entry.blurb for entry in self.toc]


@dataclasses.dataclass
class BookRef:
    """A "pointer-style" ToC, e.g. "2@song"."""

    book_label: Label
    count: int | None
    book: Book = dataclasses.field(init=False)
    label: Label = dataclasses.field(init=False)
    blurb: str = dataclasses.field(init=False)

    def __post_init__(self) -> None:
        prefix = f"{self.count}@" if self.count else "="
        self.blurb = self.label = Label(f"{prefix}{self.book_label}")


@dataclasses.dataclass
class Config:
    """The information from the config file"""

    books: Books
    starred: list[Label]


class PracticeMakesPerfect:
    """Practice Makes Perfect"""

    parser: argparse.ArgumentParser
    args: argparse.Namespace

    def parse_command_line(self) -> None:
        """Command-line"""
        parser = argparse.ArgumentParser(description="Practice Makes Perfect")
        parser.add_argument(
            "books",
            metavar="BOOK",
            type=Label,
            nargs="*",
            help=(
                "Choose books from this list; specify 'default-config' to "
                "print out the default configuration file"
            ),
        )

        group = parser.add_mutually_exclusive_group()
        group.add_argument(
            "-n",
            "--num-tracks",
            type=int,
            help="Number of tracks (etude × key) to generate",
        )
        group.add_argument(
            "-N",
            "--one-of-each",
            action="store_true",
            help="Make one track per etude in the chosen book",
        )

        parser.add_argument(
            "-m",
            "--multiline",
            action="store_true",
            help="Always print tracks on separate lines",
        )
        parser.add_argument(
            "-d",
            "--debug",
            nargs="?",
            const="-",
            metavar="FILE",
            help="Print lots of debugging information",
        )
        parser.add_argument(
            "-D",
            "--track-decks",
            nargs="+",
            help="Print debugging info on specific deck",
        )
        parser.add_argument(
            "-H",
            "--home",
            type=Path,
            default=Path.home(),
            help="Look for configuration files here",
        )
        parser.add_argument("-c", "--config", type=Path, help="Config file")
        parser.add_argument("-s", "--state-file", type=Path, help="State file")
        parser.add_argument(
            "-r",
            "--report-file",
            type=Path,
            help="Report file",
        )
        parser.add_argument(
            "-S",
            "--saveless",
            action="store_true",
            help="Don't save state/report files",
        )
        self.args = args = parser.parse_args()
        args.config = args.config or args.home / ".pmprc"
        args.state_file = args.state_file or args.home / ".pmpstate.plist"
        args.report_file = args.report_file or args.home / ".pmpreport.csv"
        self.parser = parser

    LETTERS = {"C", "D", "E", "F", "G", "A", "B"}
    ALL_NOTES = LETTERS | {f"{let}{suf}" for let in LETTERS for suf in "♯♭𝄪𝄫"}

    SCALE_KEYS = {  # Not the scales, but the valid keys (e.g., no G♯-major)
        "ANY": "C‖C♯|D♭‖D‖D♯|E♭‖E‖F‖F♯|G♭‖G‖G♯|A♭‖A‖A♯|B♭‖B",
        "major": "C ‖ C♯|D♭ ‖ D ‖ E♭ ‖ E ‖ F ‖ F♯|G♭ ‖ G ‖ A♭ ‖ A ‖ B♭ ‖ B|C♭",
        "minor": "C ‖ C♯ ‖ D ‖ D♯|E♭ ‖ E ‖ F ‖ F♯ ‖ G ‖ G♯|A♭ ‖ A ‖ A♯|B♭ ‖ B",
        "ionian": "C‖C♯|D♭‖D‖E♭‖E‖F‖F♯|G♭‖G‖A♭‖A‖B♭‖B|C♭",
        "dorian": "D‖D♯|E♭‖E‖F‖F♯‖G‖G♯|A♭‖A‖B♭‖B‖C‖C♯|D♭",
        "phrygian": "E‖E♯|F‖F♯‖G‖G♯‖A‖A♯|B♭‖B‖C‖C♯‖D‖D♯|E♭",
        "lydian": "F‖F♯|G♭‖G‖A♭‖A‖B♭‖B|C♭‖C‖D♭‖D‖E♭‖E|F♭",
        "mixolydian": "G‖G♯|A♭‖A‖B♭‖B‖C‖C♯|D♭‖D‖E♭‖E‖F‖F♯|G♭",
        "aeolian": "A‖A♯|B♭‖B‖C‖C♯‖D‖D♯|E♭‖E‖F‖F♯‖G‖G♯|A♭",
        "locrian": "B‖B♯|C‖C♯‖D‖D♯‖E‖E♯|F‖F♯‖G‖G♯‖A‖A♯|B♭",
    }

    books: Books
    decks: Decks = {}
    starred: list[Label]
    state: StringDict
    reporter: "Reporter"

    STATE_VER = "v4"

    def main(self) -> None:
        """Practice Makes Perfect"""
        self.parse_command_line()
        self._configure_logging()

        if self.args.books == ["default-config"]:
            print(DEFAULT_CONFIG)
            return

        self._make_basic_decks()
        self._configure()
        self._finalize_books()
        self._start_reporter()
        self._load_state()
        self._restore_state()

        self._run()
        if not self.args.saveless:
            self._save_state()
        log.debug("\n\n\n")

    def _header(self, text: str, level: int = 1) -> None:
        """Print a markdown-like header"""
        if level == 1:
            print(f"{text}\n{'=' * self._vlen(text)}")
        else:
            print(f"\n{text}\n{'-' * self._vlen(text)}")

    def _vlen(self, text: str) -> int:
        """Visible Length (or an approximation thereof)"""
        return sum((
            (ud.category(c)[0] in "LNPSZ") + (ud.east_asian_width(c) in "WF")
            for c in text
        ))

    def _configure_logging(self) -> None:
        """Set logging format(s) and level"""
        if self.args.track_decks:
            tracked.update(self.args.track_decks)
        if self.args.debug is None:
            logging.basicConfig(format="INFO: %(message)s", level=logging.INFO)
            return

        if self.args.debug == "-":
            handler: logging.Handler = logging.StreamHandler()
        else:
            handler = logging.FileHandler(self.args.debug)
            handler.setLevel(logging.DEBUG)
        fmt = logging.Formatter("%(asctime)s [pmp:%(lineno)d] %(message)s")
        handler.setFormatter(fmt)
        log.addHandler(handler)
        log.setLevel(logging.DEBUG)

    def _run(self) -> None:
        """Choose, report, and run the top-level book"""
        book = self._choose_book()
        count = None if self.args.one_of_each else self.args.num_tracks
        now = datetime.datetime.now()
        weekday = "月火水木金土日"[now.weekday()]
        header = now.strftime(f"%Y-%m-%d {weekday} %H:%M {book.label}")
        self._header(header)
        self._run_book(book, count=count, top=True)

    def _run_book(self, book: Book, count: int | None, top=False) -> None:
        """Run any book"""
        if book.sequential:
            self._run_sequential(book, top=top)
        else:
            self._run_plain(book, count)

    def _run_sequential(self, book: Book, top=False) -> None:
        """Run a sequence of items"""
        for entry in book.draw_all():
            if top:
                self._header(entry.label, level=2)
            if isinstance(etude := entry, Etude):
                self._run_etudes([etude])
            elif isinstance(ref := entry, BookRef):
                self._run_book(ref.book, ref.count)

    def _run_plain(self, book: Book, count: int | None) -> None:
        """Run a "simple" book, choosing etudes and assigining keys"""
        if count is None:
            count = len(book.deck)
        elif count <= 0:
            count = len(self.decks[Layout("ANY")])
        self._run_etudes(self._choose_etudes(book, count))

    def _choose_etudes(self, book: Book, count: int | None) -> Iterable[Etude]:
        """Yields chosen etudes.

        Recursion is safe here, since we used `TopologicalSorter`
        to make sure the graph is cycle-free.
        """
        for entry in book.draw_n(count or 1):
            if isinstance(etude := entry, Etude):
                yield etude
            elif isinstance(ref := entry, BookRef):
                yield from self._choose_etudes(ref.book, ref.count)

    def _choose_book(self) -> Book:
        """Pick out a book"""
        if self.args.books:
            labels = self.args.books
            if unknown := set(labels) - self.books.keys():
                self._fail(f"Unknown book(s): {' '.join(unknown)}")
        else:
            labels = self.starred
        return self.books[random.choice(labels)]

    def _make_track(self, etude: Etude) -> str:
        """Fill in the template for one etude"""
        keys = []
        for deck in etude.decks:
            key = deck.draw()
            if "|" in key:  # Can only come from our pitch classes
                key = random.choice(key.split("|"))
            if (label := key.removeprefix("@")) != key:
                other_book = self.books[Label(label)]
                (other_etude,) = self._choose_etudes(other_book, 1)
                key = self._make_track(other_etude)
            keys.append(key)

        if "{}" not in etude.template:
            return f"{keys[0]}{etude.template}"

        parts = re.split(r"({})", etude.template)
        ikey = iter(keys)
        return "".join(next(ikey) if part == "{}" else part for part in parts)

    def _run_etudes(self, etudes: Iterable[Etude]) -> None:
        """Choose keys for a bunch of etudes and print them"""
        tracks = [self._make_track(etude) for etude in etudes]
        txt = "\n".join(tracks)
        if not self.args.multiline and " " not in txt and self._vlen(txt) < 80:
            txt = " ".join(tracks)
        print(txt)

    def _make_basic_decks(self) -> None:
        """Start `self.decks` with the basic scales (major, minor, etc.)"""
        self._have(NoneDeck())
        for key, cardstr in self.SCALE_KEYS.items():
            self._have(Deck(cards=self._prep(cardstr), layout=Layout(key)))
        log.debug("Basic decks: %s", SEP.join(self.decks))

    def _prep(self, cardstr: str) -> list[str]:
        """Split, strip, and sanity-check a known scale"""
        cards = [card.strip() for card in cardstr.split("‖")]
        notes = "|".join(cards).upper().split("|")
        assert len(notes) == len(set(notes)), f"{cardstr!r}: not unique"
        assert not (bad := set(notes) - self.ALL_NOTES), f"{cardstr!r}: {bad}?"
        letters = {note[0] for note in notes}
        assert not (bad := self.LETTERS - letters), f"{cardstr!r}: no {bad}"
        return cards

    def _have(self, deck: Deck) -> Deck:
        """Add a deck to our records"""
        return self.decks.setdefault(deck.layout, deck)

    def _configure(self) -> None:
        """Fix configuration files, defaults, etc."""
        try:
            with open(self.args.config, "r", encoding="UTF-8") as fobj:
                config = self._parse_config(self.args.config, fobj)
        except (FileNotFoundError, ValueError):
            config = self._parse_config("", io.StringIO(DEFAULT_CONFIG))
        self.books = config.books
        self.starred = config.starred

    def _load_state(self) -> None:
        """Read saved deck queues state info `self.state`"""
        try:
            with open(self.args.state_file, "rb") as fobj:
                self.state = plistlib.load(fobj)[self.STATE_VER]
            if not isinstance(self.state, dict):
                raise ValueError("Somebody messed up the state file")
        except Exception:  # Can be any number of things
            self.state = {}
        for key in ["deck", "debug"]:
            if not isinstance(self.state.get(key), dict):
                self.state[key] = {}

    def _save_state(self) -> None:
        """Save queues for all decks, plus some debug info"""
        self.state["debug"] = {
            "n_decks": len(decks := self.decks.values()),
            "decks": {deck.layout: deck.blurb for deck in decks},
            "n_books": len(books := self.books.values()),
            "books": {book.blurb: book.entry_blurbs() for book in books},
            "drawn": [deck.blurb for deck in decks if deck.drawn],
            "flipped": [deck.blurb for deck in decks if deck.flipped],
        }
        self.state["deck"] = {deck.layout: self._save(deck) for deck in decks}

        with open(self.args.state_file, "wb") as fobj:
            plistlib.dump({self.STATE_VER: self.state}, fobj, sort_keys=False)

        self.reporter.save_report(self.decks)

    def _save(self, deck: Deck) -> StringDict:
        """Serialize a single deck, or leave untouched"""
        try:
            log.debug("Serializing %s", deck.blurb)
            return deck.serialize()
        except SerializationError as exc:
            log.debug("Not serializing %s: %s", deck.blurb, exc)
            return self.state["deck"].get(deck.layout, str(exc))

    def _restore_state(self) -> None:
        """Restore queues for any eligible deck"""
        nowies: dict[Layout, StringDict] = {}
        oldies: dict[Label, StringDict] = {}
        for layout, saved in self.state["deck"].items():
            if isinstance(saved, dict):
                if layout in self.decks:
                    nowies[layout] = saved
                elif isinstance(label := saved.get("label"), str):
                    oldies[Label(label)] = saved

        n_used = 0
        for layout, deck in self.decks.items():
            try:
                if saved := nowies.get(layout):
                    deck.deserialize(saved)
                elif saved := oldies.get(deck.label):
                    deck.adapt(saved)
                if queued := SEP.join(deck.queue):
                    log.debug("Loaded %s -> %s", deck.blurb, queued)
                    n_used += 1
            except SerializationError as exc:
                log.debug("Not restoring %s: %s", deck.blurb, exc)
        log.debug("Resuming %d of %d decks", n_used, len(self.decks))

    def _parse_config(self, filename: Filename, stream: t.TextIO) -> Config:
        """Read configuration file"""
        try:
            labeldecks = {deck.label: deck for deck in self.decks.values()}
            return ConfigParser(labeldecks).parse(filename, stream)
        except BadConfig as err:
            self._fail(str(err))

    def _finalize_books(self) -> None:
        """Prepare all decks for action, making sure they're unique."""
        log.debug("All books: %s", SEP.join(self.books))
        for book in self.books.values():
            book.deck = self._have(book.finalize())
            for entry in book.toc:
                if isinstance(etude := entry, Etude):
                    etude.decks = [self._have(deck) for deck in etude.decks]
                elif isinstance(ref := entry, BookRef):
                    ref.book = self.books[ref.book_label]

    def _start_reporter(self) -> None:
        """Create reporter object"""
        self.reporter = Reporter(self.args.report_file)

    def _fail(self, message: str) -> t.NoReturn:
        """Handy wrapper around `ArgumentParser.error()`"""
        self.parser.error(message)


class ConfigParser:
    """Read configuration file"""

    books: Books = {}
    starred: list[Label] = []
    curr: Book | None = None
    line_num: int
    whences: dict[Label, int]
    line: str
    mobj: re.Match | None
    deps: dict[Label, set[Label]] = collections.defaultdict(set)

    def __init__(self, labeldecks: dict[Label, Deck]) -> None:
        self.labeldecks = dict(labeldecks)
        self.whences = {label: -1 for label in labeldecks}

    def match(self, expr: str) -> bool:
        """Handy wrapper around `re.fullmatch` for the current line"""
        self.mobj = re.fullmatch(expr, self.line)
        return bool(self.mobj)

    def group(self, group: int | str) -> str:
        """Group from previous `self.match()`."""
        assert self.mobj is not None
        return str(self.mobj.group(group))

    PART_RE = r"(?P<at>(?P<count>[1-9]\d*)?@)?(?P<label>\S+)"

    def parse(self, filename: Filename, stream: t.TextIO) -> Config:
        """Read configuration file"""
        try:
            return self.do_parse(stream)
        except BadConfig as exc:
            if self.line_num:
                raise BadConfig(f"[{filename}:{self.line_num}] {exc}") from exc
            raise BadConfig(f"[{filename}] {exc}") from exc

    def do_parse(self, stream: t.TextIO) -> Config:
        """The actual reading function"""
        for self.line_num, line in enumerate(stream, 1):
            self.line = re.sub(r"\s*(#.*)?$", "", line)

            if self.match(r"([^:|]+):=(.*)"):
                self.add_deck(label=self.group(1), keys=self.group(2))
            elif self.match(r"([*]?)(\S[^:]*):"):
                self.enter_book(label=self.group(2), star=self.group(1))
            elif self.match(r"\s+([^:]*):\s+(.*)"):
                self.add_etude(template=self.group(1), deckstr=self.group(2))
            elif self.match(f"\\s+{self.PART_RE}\\s*") and self.group("at"):
                self.add_ref()
            elif self.match(r"(?P<label>[^=]*)\s*=\s*{(?P<parts>[^}]*)}"):
                self.add_one_liner(sequential=False)
            elif self.match(r"(?P<label>[^=]*)\s*=\s*\[(?P<parts>[^]]*)\]"):
                self.add_one_liner(sequential=True)
            elif self.line != "":
                raise BadConfig(f"Bad line: {self.line!r}")

        self.line_num = 0  # For error messages
        known = self.books.keys() | self.labeldecks.keys()
        if unknown := self.deps.keys() - known:
            errs = (f"[line {self.whences[unk]}] {unk!r}" for unk in unknown)
            raise BadConfig(f"Bad reference(s): {', '.join(errs)}")

        try:
            graphlib.TopologicalSorter(self.deps).prepare()
        except graphlib.CycleError as exc:
            cycle = " -> ".join(exc.args[1])
            raise BadConfig(f"Cyclical config: {cycle}") from exc

        starred = self.starred or list(self.books)
        return Config(books=self.books, starred=starred)

    def enter_book(self, label: str, star: t.Any, sequential=False) -> None:
        """Found a book line"""
        if (label := label.strip()) in self.books:
            raise BadConfig(f"Duplicate book: {label!r}")

        label = Label(label)
        self.books[label] = self.curr = Book(label, sequential)
        if star:
            self.starred.append(label)

    def add_deck(self, label: str, keys: str) -> None:
        """Found a deck line, e.g., "easy-major := C|F|G"."""
        if (label := label.strip()) in self.labeldecks:
            raise BadConfig(f"Duplicate deck: {label!r}")

        cards = [key.strip() for key in keys.split("|")]
        self.labeldecks[Label(label)] = Deck(label=label, cards=cards)

    RANGE_RE = r"\d+(-\d+)?"
    RANGES_RE = f"<({RANGE_RE},)*{RANGE_RE}>"

    def add_etude(self, template: str, deckstr: str) -> None:
        """Found an etude line, e.g., "{}-maj: {major}" or "-min: minor}."""
        if self.curr is None:
            raise BadConfig("Bookless etude")

        template = template.strip()
        if template and template[0] in "'\"" and template[-1] == template[0]:
            template = template[1:-1]
        num_placeholders = len(re.findall(r"{}", template)) or 1

        if re.fullmatch(r"\s*({[^}]*}\s*)+", deckstr):
            parts = [part[1:-1] for part in re.findall(r"{[^{}]+}", deckstr)]
        else:
            parts = [deckstr.strip()]

        if len(parts) != num_placeholders:
            raise BadConfig("Placeholder mismatch")

        decks = []
        for part in parts:
            if (label := Label(part)) in self.labeldecks:
                decks.append(self.labeldecks[label])
                self.add_dep(self.curr.label, label)
            elif re.fullmatch(self.RANGES_RE, part := part.strip()):
                decks.append(RangeDeck(part[1:-1]))
            else:
                keys = [key.strip() for key in part.split("|")]
                decks.append(Deck(cards=keys))
                for key in keys:
                    if (target := key.removeprefix("@")) != key:
                        self.add_dep(self.curr.label, Label(target))
        self.curr.toc.append(Etude(template=template, decks=decks))

    def add_ref(self, mobj: re.Match | None = None) -> None:
        """Add book reference line"""
        if self.curr is None:
            raise BadConfig("Bookless reference")

        if (mobj := mobj or self.mobj) is None:
            raise BadConfig("Partless reference")

        if nstr := mobj.group("count"):
            count = int(nstr)
        elif mobj.group("at"):
            count = 1
        else:
            count = None

        target = Label(str(mobj.group("label")))
        self.curr.toc.append(BookRef(target, count))
        self.add_dep(source=self.curr.label, target=target)

    def add_dep(self, source: Label, target: Label) -> None:
        """Remember a dependency"""
        self.deps[target].add(source)
        self.whences.setdefault(target, self.line_num)

    def add_one_liner(self, sequential: bool) -> None:
        """A one-liner is in `self.group("label" | "parts")`"""
        parts = self.group("parts").split()
        if not parts:
            raise BadConfig("Empty one-liner")

        label = self.group("label").strip()
        if star := label.startswith("*"):
            label = label[1:]
        self.enter_book(label=label, sequential=sequential, star=star)
        for part in parts:
            if mobj := re.fullmatch(self.PART_RE, part):
                self.add_ref(mobj)
            else:
                raise BadConfig(f"Bad {part!r}")
        self.curr = None


class Reporter:
    """In charge of the "history" CSV file"""

    path: Path
    by_layout: dict[Layout | None, StringDict] = {}
    now: str
    then: str

    def __init__(self, report_file: Path) -> None:
        """Initialize, read old report if possible"""
        self.now = str(today := datetime.date.today())
        self.then = str(today - datetime.timedelta(days=7))
        self.path = report_file

        try:
            default = {"gone": self.now, "label": "N/A", "layout": "N/A"}
            with open(self.path, encoding="utf-8", newline="") as csvfo:
                rows = [default | row for row in csv.DictReader(csvfo)]
            log.debug("Read %s (N = %s)", self.path, len(rows))
            self.by_layout = {Layout(row["layout"]): row for row in rows}
        except (FileNotFoundError, ValueError, KeyError, csv.Error) as exc:
            log.debug("Cannot read %s: %s", report_file, exc)

    def save_report(self, decks: Decks) -> None:
        """Write report CSV to disk"""
        to_save = [self.deck_row(deck) for deck in decks.values()]

        grouped = collections.defaultdict(list)
        for row in self.by_layout.values():
            if row["layout"] not in decks:
                grouped[row["label"]].append(row)
        to_save.extend(max(rows, key=self.when) for rows in grouped.values())
        to_save.sort(key=lambda row: row["label"].lower())

        if not to_save:
            log.debug("Nothing to write to %s", self.path)
        else:
            colset = set.union(*[set(row) for row in to_save])
            cols = ["label", "layout"] + sorted(colset - {"label", "layout"})

            log.debug("Save %s (%d x %d)", self.path, len(to_save), len(cols))
            with open(self.path, "w", encoding="utf-8", newline="") as csvfo:
                writer = csv.DictWriter(csvfo, fieldnames=cols)
                writer.writeheader()
                for row in to_save:
                    writer.writerow(row)

    def deck_row(self, deck: Deck) -> StringDict:
        """Get or make the row for a deck"""
        rows = self.by_layout
        row = rows.pop(deck.layout, None) or rows.pop(deck.old_layout, {})
        self.update(row, deck)
        return row

    def update(self, row: StringDict, deck: Deck) -> None:
        """Update row in report to reflect deck use in this session"""
        row.update(label=deck.label, layout=deck.layout, blurb=deck.blurb)
        row.pop("gone", None)
        for key in ("drawn", "flipped"):
            if value := getattr(deck, key):
                row["used"] = self.now
                try:
                    row[key] = int(row[key]) + value
                except (KeyError, ValueError, TypeError):
                    row[key] = value

    def when(self, row: StringDict) -> str:
        """Return sort of "usage date" for a row"""
        return row.get("used") or row.get("gone") or self.then


if __name__ == "__main__":
    PracticeMakesPerfect().main()
