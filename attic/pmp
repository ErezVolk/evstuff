#!/usr/bin/env python3
"""Practice Makes Perfect"""
# TODO: Reader
import argparse
import io
from pathlib import Path
import random
import re
import shlex

from collections.abc import Iterable
import typing


class Page(typing.NamedTuple):
    """A concrete page, e.g., 'minor pentatonic'"""
    name: str
    palette: str | list[str]


Pook: typing.TypeAlias = "Page | Book"
TableOfContents: typing.TypeAlias = list[Pook]


class Book(typing.NamedTuple):
    """Basically a list of pages or cross references"""
    toc: TableOfContents


PitchClass: typing.TypeAlias = tuple[str] | tuple[str, str]


class MetaBook(typing.NamedTuple):
    """A book that just an amalamation of other book"""
    line_num: int
    allsies: set[str]  # Books swallowed in their entirety
    onesies: set[str]  # Books from which a single page is taken


class Configuration(typing.NamedTuple):
    """The information from the config file"""
    books: dict[str, Book]
    defaults: list[str]
    cli: str


DEFAULT_CONFIG = """
note:
  : ANY

scale:
  -major: major
  -major: major  # Duplicate an entry to give it more weight
  -natural minor: minor
  -harmonic minor: minor
  -melodic minor: minor

mode:
  ' ionian': ionian
  ' dorian': dorian
  ' phrygian': phrygian
  ' lydian': lydian
  ' mixolydian': mixolydian
  ' aeolian': aeolian
  ' locrian': locrian

arp:
  M: major
  m: minor
  ⁷: major
  m⁷: minor
  M⁷: major
  ' major pentatonic': major
  ' minor pentatonic': minor
"""


class PracticeMakesPerfect:
    """Practice Makes Perfect"""

    parser: argparse.ArgumentParser
    args: argparse.Namespace
    config: Configuration

    def parse_command_line(self) -> None:
        """Command-line"""
        parser = argparse.ArgumentParser(
            description="Practice Makes Perfect"
        )
        parser.add_argument(
            "books",
            metavar="BOOK",
            type=str,
            nargs="*",
        )
        group = parser.add_mutually_exclusive_group()
        group.add_argument(
            "-n",
            "--num-pictures",
            type=int,
        )
        group.add_argument(
            "-N",
            "--one-per-page",
            action="store_true",
        )
        parser.add_argument(
            "-i",
            "--max-pictures",
            type=int,
        )
        parser.add_argument(
            "-m",
            "--multiline",
            action="store_true",
        )
        parser.add_argument(
            "-v",
            "--verbose",
            action="store_true",
        )
        parser.add_argument(
            "-c",
            "--config",
            type=Path,
            default=Path.home() / ".pmprc",
        )
        self.args = parser.parse_args()
        self.parser = parser

    T = typing.TypeVar("T")

    _LETTERS = "CDEFGAB"
    _MODES = (
        "ionian",
        "dorian",
        "phrygian",
        "lydian",
        "mixolydian",
        "aeolian",
        "locrian",
    )

    PITCH_CLASSES: list[PitchClass] = [
        ("C",),
        ("C♯", "D♭"),
        ("D",),
        ("D♯", "E♭"),
        ("E",),
        ("F",),
        ("F♯", "G♭"),
        ("G",),
        ("G♯", "A♭"),
        ("A",),
        ("A♯", "B♭"),
        ("B",),
    ]

    SCALE_FIX: dict[str, dict[str, str]] = {
        "NONE": {},
        "ANY": {},
        "major": {
            "G♯": "A♭",
            "D♯": "E♭",
            "A♯": "B♭",
        },
        "minor": {
            "G♭": "F♯",
            "D♭": "C♯",
            "A♭": "G♯",
            # "A♯": "B♭",  (according to Wikipedia)
        }
    }

    DEFAULT_CLI = f"-n {len(PITCH_CLASSES)}"

    def main(self) -> None:
        """Practice Makes Perfect"""
        self.parse_command_line()

        if self.args.books == ["default-config"]:
            print(DEFAULT_CONFIG)
            return

        self.add_modes()
        self.configure()

        book_pool = self.config.books
        report = False

        if not self.args.books:
            self.args.books = [random.choice(self.config.defaults)]
            if len(self.config.defaults) > 1:
                report = True
        if (unknown := set(self.args.books) - set(book_pool)):
            self.fail(f"Unknown book(s): {' '.join(unknown)}")
        book_name = random.choice(self.args.books)

        pook_pool = book_pool[book_name].toc
        if self.args.max_pictures:
            if len(pook_pool) > self.args.max_pictures:
                pook_pool = random.sample(pook_pool, self.args.max_pictures)

        if self.args.one_per_page:
            num_pictures = len(pook_pool)
        else:
            num_pictures = min(self.args.num_pictures, len(book_pool))

        if self.args.verbose or report:
            print(f"[{book_name} × {num_pictures}]")

        page_seq: list[Page] = []
        for pook in self.choose(pook_pool, num_pictures):
            looked = set()
            while isinstance(pook, Book):
                if pook in looked:
                    self.fail("There is a loop")
                looked.add(pook)
                pook = random.choice(pook.toc)
            page_seq.append(pook)

        # TODO: All the different palettes
        pitch_class_seq = self.choose(self.PITCH_CLASSES, num_pictures)

        picture_seq = []
        for page, pitch_class in zip(page_seq, pitch_class_seq):
            if page.palette == "NONE":
                color = ""
            elif isinstance(page.palette, list):
                color = random.choice(page.palette)
            else:
                color = self.choose_note(pitch_class, page.palette)
            picture_seq.append(f"{color}{page.name}")

        print(self.get_sep(picture_seq).join(picture_seq))

    def get_sep(self, pictures: list[str]) -> str:
        """Return space or newline separator"""
        if self.args.multiline:
            return "\n"
        if any(" " not in pic for pic in pictures):
            return "\n"
        if sum(len(pic) for pic in pictures) + len(pictures) >= 80:
            return "\n"
        return " "

    def add_modes(self) -> None:
        """Add the Greek modes and their hypotheticals to our known scales"""
        model = self.SCALE_FIX["major"]
        mapping: dict[str, str]

        for offset, mode in enumerate(self._MODES):
            mapping = {
                note: self._LETTERS[(idx + offset) % len(self._LETTERS)]
                for idx, note in enumerate(self._LETTERS)
            }

            def modify(note: str) -> str:
                try:
                    return mapping[note[0]] + note[1:]
                except KeyError:
                    return note

            self.SCALE_FIX[mode] = {
                modify(key): modify(value)
                for key, value in model.items()
            }

    def choose_note(self, pitch_class: PitchClass, scale: str) -> str:
        """Choose one way of spelling a note (e.g., C♯ or D♭")."""
        note = random.choice(pitch_class)
        return self.SCALE_FIX[scale].get(note, note)

    def choose(self, options: Iterable[T], num_choices: int) -> list[T]:
        """Choose so we have as many "full" repetitions and a random tail"""
        opts = list(options)
        nopts = len(opts)

        if num_choices <= nopts:
            return random.sample(opts, max(num_choices, 1))

        ntail = num_choices % nopts
        n_full_rounds = (num_choices - ntail) // nopts

        choices = (opts * n_full_rounds) + random.sample(opts, ntail)
        return choices

    def configure(self) -> None:
        """Fix configuration files, defaults, etc."""
        try:
            with open(self.args.config, "r", encoding="UTF-8") as fobj:
                self.config = self.parse_config(fobj)
        except (FileNotFoundError, ValueError):
            self.config = self.parse_config(io.StringIO(DEFAULT_CONFIG))
        for cli in (self.config.cli, self.DEFAULT_CLI):
            new_args = self.parser.parse_args(shlex.split(cli))
            for key, val in vars(self.args).items():
                if val is None:
                    if (new_val := getattr(new_args, key)):
                        setattr(self.args, key, new_val)

    def parse_config(self, stream: typing.TextIO) -> Configuration:
        """Read configuration file"""
        books: dict[str, Book] = {}
        metas: dict[str, MetaBook] = {}
        defaults = []
        curr: Book | None = None
        line: str
        cli: str = ""

        def match(expr: str) -> re.Match | None:
            return re.fullmatch(expr, line)

        for line_num, line in enumerate(stream, 1):
            line = re.sub(r"\s*(#.*)?$", "", line)

            if (mobj := match(r"cli:\s+(.*)")):
                cli = mobj.group(1).strip()
            elif (mobj := match(r"([*]?)(\S[^:]*):")):
                name = mobj.group(2).strip()
                books[name] = curr = Book([])
                if mobj.group(1) == "*":
                    defaults.append(name)
            elif (mobj := match(r"\s+([^:]*):\s+(.*)")):
                if curr is None:
                    self.fail(f"Key without section in line {line_num}")
                name = mobj.group(1).strip()
                if name and name[0] in ["'", '"'] and name[-1] == name[0]:
                    name = name[1:-1]
                field = mobj.group(2).strip()
                assert curr is not None
                if field in self.SCALE_FIX:
                    curr.toc.append(Page(name=name, palette=field))
                else:
                    choices = [choice.strip() for choice in field.split("|")]
                    curr.toc.append(Page(name=name, palette=choices))
            elif (mobj := match(r"([^=]*)\s*=\s*{([^}]*)}")):
                name = mobj.group(1).strip()
                members = {drill.strip() for drill in mobj.group(2).split()}
                if not members:
                    self.fail(f"No drill in {name} (line {line_num})")
                allsies = {one for one in members if not one.startswith("@")}
                onesies = {one[1:] for one in members - allsies}
                metas[name] = MetaBook(
                    line_num=line_num,
                    allsies=allsies,
                    onesies=onesies,
                )
            elif not match(r""):
                self.fail(f"Cannot parse line {line_num}: {repr(line)}")

        # Now add the metas; check the names first to avoid loops
        known = set(books)
        for name, meta in metas.items():
            unknown = (meta.allsies | meta.onesies) - known
            if unknown:
                unks = " ".join(unknown)
                self.fail(
                    f"Unknown drill(s) on line {meta.line_num}: "
                    f"{unks} in meta {name}"
                )

        for name, meta in metas.items():
            items: TableOfContents = [books[onesie] for onesie in meta.onesies]
            for allsie in meta.allsies:
                items.extend(books[allsie].toc)
            books[name] = Book(items)

        return Configuration(
            books=books,
            defaults=defaults or list(books),
            cli=cli,
        )

    def fail(self, message: str) -> typing.NoReturn:
        """Handy wrapper around ArgumentParser's fail method"""
        self.parser.error(message)


if __name__ == "__main__":
    PracticeMakesPerfect().main()
