#!/usr/bin/env python3
"""Translation stats"""
from datetime import datetime
from datetime import time
from pathlib import Path

import pandas as pd
import seaborn as sns

# Stupid Excel
# EPOCH_DATETIME = datetime(1900, 1, 1, 0, 0, 0)
EPOCH_DATETIME = datetime(1899, 12, 31, 0, 0, 0)


def main():
    """Translation stats"""
    sns.set()
    root = Path.home() / "translation"
    sheet = pd.read_excel(
        root / "skel" / "stats.xls", converters={"Time": time_to_hours}
    )
    sheet["Hours"] = sheet.Time.astype(float)

    lgs = sheet[
        (sheet["O-Words"] > 0) & (sheet["T-Chars+"] > 0) & (sheet["O-Chars"] > 0)
    ].copy()
    lgs["Books"] = 1
    lgs = lgs.groupby(["Lg"]).sum(numeric_only=True)
    lgs["T-GD+"] = lgs["T-Chars+"] / 24000
    lgs["O-W/T-GD+"] = lgs["O-Words"] / lgs["T-GD+"]
    lgs["O-C/T-GD+"] = lgs["O-Chars"] / lgs["T-GD+"]
    lgs["O-C/O-W"] = (lgs["O-Chars"] / lgs["O-Words"]).round(1)

    stats = sheet[~sheet.Hours.isna()]
    stats = stats.groupby(["Lg", "T/E"]).sum(numeric_only=True)
    stats["O-W/H"] = (stats["O-Words"] / stats["Hours"]).round(0).astype(int)

    stats["lgow"] = stats.groupby("Lg")["O-Words"].transform("sum")
    stats["lgtc"] = stats.groupby("Lg")["T-Chars+"].transform("sum")
    stats["O-W/GD+"] = (stats.lgow * 24000 / stats.lgtc).round(0).astype(int)

    stats = stats[["O-Words", "Hours", "O-W/H", "O-W/GD+"]]

    lgs = lgs.loc[
        stats.index.levels[0],
        ["O-Chars", "O-Words", "O-C/O-W", "O-W/T-GD+", "O-C/T-GD+", "Hours", "Books"],
    ]

    plats = sheet.loc[sheet["O-W/H"] > 0].copy()
    for lang, row in lgs.iterrows():
        kws = int(row["O-Words"]) // 1000
        hrs = row["Hours"]
        bks = int(row["Books"])
        plats.loc[plats.Lg == lang, "Lg"] = (
            f"{lang}\n"
            f"{bks} bk\n"
            f"{kws:,} kW\n"
            f"{int(hrs):,} hrs"
        )

    plot = sns.catplot(
        kind="violin",
        data=plats,
        x="Lg",
        y="O-W/H",
        hue="T/E",
        split=True,
        inner="quart",
        linewidth=1,
        palette={"Tr": "b", "Ed": ".85"},
        scale="count",
        height=8,
        aspect=1.2,
    )
    plot.fig.subplots_adjust(top=0.9)
    plot.fig.suptitle("Words per Hour by Language")
    plot.savefig(root / "stats.pdf")

    stats = stats.sort_values(["T/E", "Lg"], ascending=[False, True])
    for col in stats.columns:
        if col != "O-C/O-W":
            stats[col] = stats[col].map("{:,.0f}".format)
    print(stats)
    print(datetime.utcnow())


def time_to_hours(timestamp):
    """Time cell is either `datetime.time` or `datetime.datetime` (if >24h).

    This coverts both to hours (float).
    """
    if timestamp is None:
        return None
    if isinstance(timestamp, time):
        return timestamp.hour + timestamp.minute / 60 + timestamp.second / 3600
    if isinstance(timestamp, datetime):
        return (timestamp - EPOCH_DATETIME).total_seconds() / 3600
    raise ValueError(repr(timestamp))


if __name__ == "__main__":
    main()
