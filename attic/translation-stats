#!/usr/bin/env python3
from datetime import datetime
from datetime import date
from datetime import time
from pathlib import Path

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

EPOCH_DATE = date(1900, 1, 1)
EPOCH_DATETIME = datetime(1900, 1, 1, 0, 0, 0)


def main():
    sns.set()
    root = Path.home() / "translation"
    sheet = pd.read_excel(root / "skel" / "stats.xls", converters={"Time": time_to_hours})
    sheet.Time = sheet.Time.astype(float)

    lgs = sheet[(sheet["O-Words"] > 0) & (sheet["T-Chars+"] > 0) & (sheet["O-Chars"] > 0)]
    lgs = lgs.groupby(["Lg"]).sum()
    lgs["T-GD+"] = lgs["T-Chars+"] / 24000
    lgs["O-W/T-GD+"] = lgs["O-Words"] / lgs["T-GD+"]
    lgs["O-C/T-GD+"] = lgs["O-Chars"] / lgs["T-GD+"]
    lgs["O-C/O-W"] = (lgs["O-Chars"] / lgs["O-Words"]).round(1)

    stats = sheet[~sheet.Time.isna()]
    stats = stats.groupby(["Lg", "T/E"]).sum()
    stats["O-W/H"] = (stats["O-Words"] / stats["Time"]).round(0).astype(int)
    stats = stats[["O-Words", "O-W/H"]]

    lgs = lgs.loc[stats.index.levels[0], ["O-Chars", "O-C/O-W", "O-W/T-GD+", "O-C/T-GD+"]]
    for lg, row in lgs.iterrows():
        for col, value in row.iteritems():
            stats.loc[lg, col] = value

    fig, ax = plt.subplots(1, 1, figsize=(8, 8))
    fig.suptitle("Words per Hour by Language")
    plats = sheet.loc[sheet["O-W/H"] > 0]
    sns.violinplot(
        ax=ax,
        data=plats,
        x="Lg", y="O-W/H", hue="T/E",
        split=True, inner="quart", linewidth=1,
        palette={"Tr": "b", "Ed": ".85"}
    )
    sns.despine(left=True)
    fig.savefig(root / "stats.pdf")
    plt.close()

    stats.sort_values(["T/E", "Lg"], ascending=[False, True], inplace=True)
    for c in stats.columns:
        if c != "O-C/O-W":
            stats[c] = stats[c].map("{:,.0f}".format)
    print(stats)
    print(datetime.utcnow())


def time_to_hours(t):
    """Time cell is either `datetime.time` or `datetime.datetime` (if >24h).

    This coverts both to hours (float).
    """
    if t is None:
        return None
    if isinstance(t, time):
        t = datetime.combine(EPOCH_DATE, t)
    if isinstance(t, datetime):
        return (t - EPOCH_DATETIME).total_seconds() / 3600
    raise ValueError(repr(t))


if __name__ == "__main__":
    main()
