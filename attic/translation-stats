#!/usr/bin/env python
"""Calculate translation stats."""
from argparse import ArgumentParser
from datetime import UTC
from datetime import datetime
from datetime import time
from functools import partial
from pathlib import Path

import matplotlib.pyplot as plt
import numpy as np
import numpy.typing as npt
import pandas as pd
import seaborn as sns

EPOCH_DATETIME = datetime(1899, 12, 31, 0, 0, 0, tzinfo=UTC)  # Stupid Excel
ROOT = Path.home() / "translation"


def main() -> None:
    """Calculate translation stats."""
    parser = ArgumentParser()
    parser.add_argument("-i", "--input", type=Path, default=ROOT / "skel" / "stats.xls")
    parser.add_argument("-o", "--output", type=Path, default=ROOT / "stats.pdf")
    parser.add_argument("--show", action="store_true")
    args = parser.parse_args()

    sns.set()
    sheet = pd.read_excel(
        args.input,
        converters={"Time": partial(time_to_hours, state={})},
    )
    sheet["Hours"] = sheet.Time.astype(float)

    lgs = sheet[
        (sheet["O-Words"] > 0) & (sheet["T-Chars+"] > 0) & (sheet["O-Chars"] > 0)
    ].copy()
    lgs["Books"] = 1
    lgs = lgs.groupby(["Lg"]).sum(numeric_only=True)
    lgs["T-GD+"] = lgs["T-Chars+"] / 24000
    lgs["O-W/T-GD+"] = lgs["O-Words"] / lgs["T-GD+"]
    lgs["O-C/T-GD+"] = lgs["O-Chars"] / lgs["T-GD+"]
    lgs["O-C/O-W"] = (lgs["O-Chars"] / lgs["O-Words"]).round(1)

    sheet = sheet[sheet.Hours.notna()]
    stats = sheet.groupby(["Lg", "T/E"]).sum(numeric_only=True)
    stats["O-W/H"] = (stats["O-Words"] / stats["Hours"]).round(0).astype(int)

    stats["lgow"] = stats.groupby("Lg")["O-Words"].transform("sum")
    stats["lgtc"] = stats.groupby("Lg")["T-Chars+"].transform("sum")
    stats["O-W/GD+"] = (stats.lgow * 24000 / stats.lgtc).round(0).astype(int)

    stats = stats[["O-Words", "Hours", "O-W/H", "O-W/GD+"]]

    lgs = lgs.loc[
        stats.index.levels[0],
        ["O-Chars", "O-Words", "O-C/O-W", "O-W/T-GD+", "O-C/T-GD+", "Hours", "Books"],
    ]

    plats = sheet.loc[sheet["O-W/H"] > 0].copy()
    for lang, row in lgs.iterrows():
        kws = int(row["O-Words"]) // 1000
        hrs = row["Hours"]
        bks = int(row["Books"])
        lg_lines = [lang, f"{bks} bk", f"{kws:,} kW", f"{int(hrs):,} hrs"]
        plats.loc[plats.Lg == lang, "Lg"] = "\n".join(lg_lines)

    plot = sns.catplot(
        kind="violin",
        data=plats,
        x="Lg",
        y="O-W/H",
        hue="T/E",
        split=True,
        inner="quart",
        linewidth=1,
        palette={"Tr": "b", "Ed": ".85"},
        density_norm="count",
        height=8,
        aspect=1.2,
    )
    plot.fig.subplots_adjust(top=0.9)
    plot.fig.suptitle("Words per Hour by Language")
    plot.savefig(args.output)

    stats = stats.sort_values(["T/E", "Lg"], ascending=[False, True])
    for col in stats.columns:
        if col != "O-C/O-W":
            stats[col] = stats[col].map(lambda val: f"{val:,.0f}")

    ohw_min = plats["O-W/H"].min()
    ohw_max = plats["O-W/H"].max()
    hcol = f"histogram ({int(ohw_min)}..{int(ohw_max)})"
    stats[hcol] = [
        histogram(
            plats[
                plats.Lg.str.startswith(row.Lg) & (
                    plats["T/E"] == row["T/E"]
                )
            ]["O-W/H"],
            min_max=(ohw_min, ohw_max),
            bins=len(hcol),
        )
        for _, row in stats.reset_index().iterrows()
    ]
    print(stats.to_string(index_names=False))
    print(datetime.now(tz=UTC))

    if args.show:
        plt.show(block=True)


def time_to_hours(timestamp: str | time | datetime, state: dict) -> float:
    """Time cell is either `datetime.time` or `datetime.datetime` (if >24h).

    This coverts both to hours (float).
    """
    n_times = state["n_times"] = state.get("n_times", 0) + 1
    if not timestamp:
        return float("nan")
    if isinstance(timestamp, time):
        return timestamp.hour + timestamp.minute / 60 + timestamp.second / 3600
    if isinstance(timestamp, datetime):
        timestamp = timestamp.replace(tzinfo=UTC)
        return (timestamp - EPOCH_DATETIME).total_seconds() / 3600
    print(f"[Time:{n_times + 1}] Warning: Cannot parse timestamp {timestamp!r}")
    return float("nan")


def histogram(
    values: npt.ArrayLike,
    bins: int = 20,
    min_max: tuple[int, int] | None = None,
) -> str:
    """Make an ASCII histogram."""
    counts, _ = np.histogram(np.asarray(values), bins=bins, range=min_max)
    if np.all(counts == 0):
        eighths = counts
    else:
        eighths = np.rint(counts * 8 / np.max(counts)).astype(int)
    chars = [
        "." if e == 0 else chr(0x2580 + e)
        for e in eighths
    ]
    return "".join(chars)


if __name__ == "__main__":
    main()
