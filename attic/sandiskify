#!/usr/bin/env python3
from argparse import ArgumentParser
from io import BytesIO
from pathlib import Path
import re
import shutil

from mutagen.id3 import ID3
from mutagen.id3 import APIC
from mutagen.id3 import TRCK
from mutagen.id3 import TIT2
from mutagen.id3 import TALB
from mutagen.id3 import TPE1
from PIL import Image
from PIL import ImageDraw
from PIL import ImageFont


def main():
    parser = ArgumentParser()
    parser.add_argument("-i", "--input", type=Path, default=".")
    parser.add_argument("-o", "--output", type=Path)
    parser.add_argument("-n", "--playlist-name", type=str)
    parser.add_argument("-a", "--artist", type=str)
    parser.add_argument("-A", "--album", type=str)
    parser.add_argument("-t", "--thumbnail-size", type=int, default=480)
    parser.add_argument("-P", "--no-pic", action="store_true")
    args = parser.parse_args()

    if not args.output:
        inname = args.input.resolve().name
        if (m := re.match(r"^(.*) - (.*)$", inname)):
            if not args.artist:
                args.artist = m.group(1)
            if not args.album:
                args.album = m.group(2)
            args.output = Path(inname)
        else:
            args.output = Path("sandisk")
    if args.output.is_dir():
        shutil.rmtree(args.output)

    mp3s = [p for p in args.input.rglob("*.mp3")]
    if not mp3s:
        parser.error(f"No MP3 files in {args.input}")

    jpgs = [p for p in args.input.rglob("*.jpg")]
    if len(jpgs) == 1 and not args.no_pic:
        cover = Image.open(jpgs[0])
        if any(s > args.thumbnail_size for s in cover.size):
            cover.thumbnail((args.thumbnail_size, args.thumbnail_size))
    else:
        cover = None

    try:
        font = ImageFont.truetype("Arial Bold.ttf", 48)
    except OSError:
        font = None

    name_to_path = {p.name: p for p in mp3s}
    if len(name_to_path) != len(mp3s):
        dupes = [
            name
            for name in sorted(name_to_path)
            if sum(1 for p in mp3s if p.name == name) > 1
        ]
        parser.error(f"Duplicate file names! {dupes}")

    args.output.mkdir(parents=True, exist_ok=True)

    m3ufn = args.output / f"{args.playlist_name or args.output.name}.m3u"

    print(f"Writing {len(mp3s)} files to {m3ufn}")
    with open(m3ufn, "w", newline="\r\n") as m3u:
        m3u.write("#EXTM3U\n")
        for track, (name, path) in enumerate(sorted(name_to_path.items()), 1):
            if args.album or args.artist or cover:
                id3 = ID3()
                set_tag(id3, TRCK(encoding=3, text=str(track)))
                set_tag(id3, TIT2(encoding=3, text=path.stem))

                if args.album:
                    set_tag(id3, TALB(encoding=3, text=args.album))
                if args.artist:
                    set_tag(id3, TPE1(encoding=3, text=args.artist))
                if cover:
                    image = cover.copy()
                    ImageDraw.Draw(image).text(
                        xy=(0, 0),
                        text=path.stem,
                        fill=(255, 255, 0),
                        stroke_width=3,
                        stroke_fill=(0, 0, 255),
                        font=font,
                    )
                    with BytesIO() as bio:
                        image.save(bio, "JPEG")
                        apic = APIC(encoding=3, mime="image/jpeg", type=3, data=bio.getvalue())
                    set_tag(id3, apic)
                id3.save(path)

            path.link_to(args.output / name)
            m3u.write("#EXTINF:0,")
            m3u.write(name)
            m3u.write("\n")
            m3u.write(name)
            m3u.write("\n\n")


def set_tag(id3: ID3, tag):
    id3.setall(tag.FrameID, [tag])


if __name__ == "__main__":
    main()
