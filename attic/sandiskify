#!/usr/bin/env python3
"""Make thumbnails and .m3u for copying an audiobook to sandisk."""
import re
import shutil
from argparse import ArgumentParser
from io import BytesIO
from pathlib import Path

from mutagen.id3 import APIC
from mutagen.id3 import ID3
from mutagen.id3 import TALB
from mutagen.id3 import TIT2
from mutagen.id3 import TPE1
from mutagen.id3 import TRCK
from PIL import Image
from PIL import ImageDraw
from PIL import ImageFont


def main() -> None:
    """Make thumbnails and .m3u for copying an audiobook to sandisk."""
    parser = ArgumentParser()
    parser.add_argument("-i", "--input", type=Path, default=".")
    parser.add_argument("-o", "--output", type=Path)
    parser.add_argument("-n", "--playlist-name", type=str)
    parser.add_argument("-a", "--artist", type=str)
    parser.add_argument("-A", "--album", type=str)
    parser.add_argument("-t", "--thumbnail-size", type=int, default=120)
    parser.add_argument("-P", "--no-pic", action="store_true")
    parser.add_argument("-f", "--font", type=str, default="Arial Bold.ttf")
    parser.add_argument("-F", "--font-size", type=int, default=36)
    parser.add_argument("-s", "--suffix", default="mp3")
    args = parser.parse_args()

    if not args.output:
        inname = args.input.resolve().name
        if rem := re.match(r"^(.*) - (.*)$", inname):
            if not args.artist:
                args.artist = rem.group(1)
            if not args.album:
                args.album = rem.group(2)
            args.output = Path(inname)
        else:
            args.output = Path("sandisk")
    if args.output.is_dir():
        shutil.rmtree(args.output)

    files = list(args.input.rglob(f"*.{args.suffix}"))
    if not files:
        parser.error(f"No *.{args.suffix} files in {args.input}")

    jpgs = list(args.input.glob("*.jpg"))
    if len(jpgs) == 1 and not args.no_pic:
        cover_path = jpgs[0]
        cover = Image.open(cover_path)
        if any(s > args.thumbnail_size for s in cover.size):
            cover.thumbnail((args.thumbnail_size, args.thumbnail_size))
        (width, height) = cover.size
        if width != height:
            length = max(width, height)
            square = Image.new(cover.mode, (length, length))
            square.paste(
                cover,
                ((length - width) // 2,
                 (length - height) // 2),
            )
            cover = square
    else:
        cover = None

    try:
        font = ImageFont.truetype(args.font, args.font_size)
    except OSError:
        font = None

    name_to_path = {p.name: p for p in files}
    if len(name_to_path) != len(files):
        dupes = [
            name
            for name in sorted(name_to_path)
            if sum(1 for p in files if p.name == name) > 1
        ]
        parser.error(f"Duplicate file names! {dupes}")

    args.output.mkdir(parents=True, exist_ok=True)

    m3ufn = args.output / f"{args.playlist_name or args.output.name}.m3u"
    coverable = args.suffix.lower() == "mp3"

    print(f"Writing {len(files)} files to {m3ufn}")
    with m3ufn.open("w", encoding="utf-8", newline="\r\n") as m3u:
        m3u.write("#EXTM3U\n")
        if cover and not coverable:
            copied = (args.output / "cover").with_suffix(cover_path.suffix)
            copied.hardlink_to(cover_path)
            m3u.write("#EXTIMG:")
            m3u.write(copied.name)
            m3u.write("\n")
            m3u.write(copied.name)
            m3u.write("\n\n")

        for track, (name, path) in enumerate(sorted(name_to_path.items()), 1):
            if coverable:
                if args.album or args.artist or cover:
                    id3 = ID3()
                    set_tag(id3, TRCK(encoding=3, text=str(track)))
                    set_tag(id3, TIT2(encoding=3, text=path.stem))

                    if args.album:
                        set_tag(id3, TALB(encoding=3, text=args.album))
                    if args.artist:
                        set_tag(id3, TPE1(encoding=3, text=args.artist))
                    if cover:
                        rem = re.search(r"\D((\d+[-_ ])?\d+)$", path.stem)
                        if rem is not None:
                            image = cover.copy()
                            ImageDraw.Draw(image).text(
                                xy=(0, 0),
                                text=rem.group(1),
                                fill=(255, 255, 0),
                                stroke_width=3,
                                stroke_fill=(0, 0, 255),
                                font=font,
                            )
                        else:
                            image = cover
                        with BytesIO() as bio:
                            image.save(bio, "JPEG")
                            apic = APIC(
                                encoding=3,
                                mime="image/jpeg",
                                type=3,
                                data=bio.getvalue(),
                            )
                        set_tag(id3, apic)
                    id3.save(path)

            (args.output / name).hardlink_to(path)
            m3u.write("#EXTINF:0,")
            m3u.write(name)
            m3u.write("\n")
            m3u.write(name)
            m3u.write("\n\n")


def set_tag(id3: ID3, tag: str | APIC) -> None:
    """Set a tag."""
    id3.setall(tag.FrameID, [tag])


if __name__ == "__main__":
    main()
