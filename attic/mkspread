#!/usr/bin/env python3
"""Create a tarot spread."""
from pathlib import Path
from argparse import ArgumentParser
import random
from typing import List

from PIL import Image


def main():
    """Create a tarot spread."""
    parser = ArgumentParser()
    parser.add_argument(
        "-i",
        "--inputs",
        nargs="+",
        type=Path,
        metavar="DIRECTORY",
        default=[Path("cbd")],
        help="Directory with card images",
    )
    parser.add_argument(
        "-o",
        "--output",
        type=Path,
        metavar="DIRECTORY",
        default="spreads",
        help="Output directory",
    )
    parser.add_argument(
        "-s",
        "--suffix",
        type=str,
        help="Suffix to add to spread filenames (default: input dirname)",
    )
    parser.add_argument("-f", "--force", action="store_true")
    parser.add_argument(
        "cards",
        metavar="STEM",
        nargs="+",
        help="Card names, e.g., a01 a23; use rN for N random cards",
    )
    args = parser.parse_args()

    cards = [
        card
        for spec in args.cards
        for card in spec_to_cards(spec)
    ]

    for card_dir in args.inputs:
        stem = "_".join(args.cards)
        suffix = args.suffix
        if suffix is None:
            suffix = f"-{card_dir.name}"
        output = args.output / f"{stem}{suffix}.jpg"

        if args.force or not output.is_file():
            inputs = [input_fn(card_dir, card) for card in cards]

            images = [Image.open(fn) for fn in inputs]
            spread_width = sum(i.size[0] for i in images)
            spread_height = max(i.size[1] for i in images)
            spread = Image.new(
                mode="RGB", size=(spread_width, spread_height), color="white"
            )
            offset = 0
            for image in images:
                spread.paste(image, (offset, 0))
                offset += image.size[0]
            spread.save(output)
            print(f"Created {output}")
        else:
            spread = Image.open(output)

        spread.show()


def input_fn(card_dir, card) -> Path:
    """Return Path of a card image file"""
    for path in card_dir.glob(f"{card}.*"):
        return path
    raise FileNotFoundError(card_dir / f"{card}.*")


def spec_to_cards(spec: str) -> List[str]:
    """Return a single card or a random sequence"""
    if not spec.startswith("r"):
        return spec

    count = int(spec[1:])
    return [
        f"a{n:02d}"
        for n in random.sample(range(1, 22), count)
    ]


if __name__ == "__main__":
    main()
