#!/usr/bin/env python3
from pathlib import Path
from argparse import ArgumentParser
from subprocess import run
from PIL import Image


def main():
    parser = ArgumentParser()
    parser.add_argument(
        "-i",
        "--inputs",
        nargs="+",
        type=Path,
        metavar="DIRECTORY",
        default=[Path("cbd")],
        help="Directory with card images",
    )
    parser.add_argument(
        "-o",
        "--output",
        type=Path,
        metavar="DIRECTORY",
        default="spreads",
        help="Output directory",
    )
    parser.add_argument(
        "-s",
        "--suffix",
        type=str,
        help="Suffix to add to spread filenames (default: input dirname)",
    )
    parser.add_argument("-f", "--force", action="store_true")
    parser.add_argument(
        "-m", "--method", choices=["ImageMagic", "python"], default="python"
    )
    parser.add_argument(
        "cards", metavar="STEM", nargs="+", help="Card names, e.g., a01 a23"
    )
    args = parser.parse_args()

    open_cmd = ["open"]
    for card_dir in args.inputs:
        stem = "_".join(args.cards)
        suffix = args.suffix
        if suffix is None:
            suffix = f"-{card_dir.name}"
        output = args.output / f"{stem}{suffix}.jpg"

        def input_fn(card):
            for path in card_dir.glob(f"{card}.*"):
                return path

        if not args.force and not output.is_file():
            inputs = [input_fn(card) for card in args.cards]

        if args.method == "convert":
            command = ["convert", "+append"] + inputs + [output]
            command = [str(a) for a in command]
            run(command, check=True)
        else:
            images = [Image.open(fn) for fn in inputs]
            spread_width = sum(i.size[0] for i in images)
            spread_height = max(i.size[1] for i in images)
            spread = Image.new(
                mode="RGB",
                size=(spread_width, spread_height),
                color="white"
            )
            offset = 0
            for image in images:
                spread.paste(image, (offset, 0))
                offset += image.size[0]
            spread.save(output)
        print(f"Created {output}")

        open_cmd.append(output)

    run(open_cmd)


if __name__ == "__main__":
    main()
