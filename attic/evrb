#!/usr/bin/env python3
"""Erez Volk's Rsync Backup."""
import argparse
import shlex
import subprocess
import typing as t
from pathlib import Path

__TODO__ = """
- Case where there's more than one disk attached
- A restore option
- Write default exclude file
- Backup multiple machines
"""


class EvRb:
    """Erez Volk's Restic Backup."""

    def parse_args(self) -> None:
        """Parse command-line arguments."""
        parser = argparse.ArgumentParser(
            description="Backup home (using restic) to an external volume",
        )
        parser.add_argument(
            "-v",
            "--volume",
            type=Path,
            help="Volume for backups",
        )
        parser.add_argument(
            "-x",
            "--exclude",
            type=str,
            nargs="*",
            help="Exclude list (case-insensitive)",
        )
        parser.add_argument(
            "-n",
            "--dry-run",
            action="store_true",
            help="List the files instead of copying them",
        )
        parser.add_argument(
            "-y",
            "--yes",
            action="store_true",
            help="Don't wait",
        )
        args = parser.parse_args()
        self.parser = parser
        self.args = args

    args: argparse.Namespace
    parser: argparse.ArgumentParser
    root: Path
    exclude: list[Path | str]

    def run(self) -> None:
        """Incremental backup to external volume."""
        self.parse_args()
        self.find_root()
        self.find_exclude()
        self.backup()

    def fail(self, message: str) -> t.Never:
        """Fail and exit."""
        self.parser.error(message)

    def find_root(self) -> None:
        """Figure out where to backup to."""
        if self.args.volume:
            if not self.args.volume.is_dir():
                self.fail("Invalid volume")
            root = self.args.volume / "restic"
        else:
            for volume in Path("/Volumes").glob("*"):
                if (root := volume / "restic").is_dir():
                    break
            else:
                self.fail("Please specify --volume")

        self.root = root
        if not root.is_dir():
            print(f"Creating {root}/")
            self.restic(["init"])

    def find_exclude(self) -> None:
        """Figure out exclude list."""
        if self.args.exclude is not None:
            self.exclude = self.args.exclude
        else:
            self.exclude = [
                Path.home() / "Library",
                Path.home() / ".Trash",
                Path.home() / ".local",
                Path.home() / ".pub-cache",
                Path.home() / "Music/Music",
                "cache",
                ".cache",
                "_cacache",
                "Caches",
            ]

    def backup(self) -> None:
        """Run restic."""
        args = [
            "backup",
            Path.home(),
            "--verbose",
            "--exclude-caches",
        ]
        for item in self.exclude:
            args.extend(["--iexclude", str(item)])
        if self.args.dry_run:
            args.append("--dry-run")
        self.restic(args)

    def restic(self, args: list[str]) -> None:
        """Call restic."""
        args = [
            "/usr/bin/caffeinate",
            "restic",
            "--repo",
            str(self.root),
            "--insecure-no-password",
            *map(str, args),
        ]
        print(" ".join(shlex.quote(arg) for arg in args))
        input("Press Enter to run...")
        subprocess.run(args, check=True)


if __name__ == "__main__":
    EvRb().run()
