#!/usr/bin/env python3
"""Shuffle chapters in a PDF file"""
from argparse import ArgumentParser
from pathlib import Path
import random

import fitz  # type: ignore; pip install pymupdf

# We only use bookmarks that point to a new page
TOP_OF_PAGE = fitz.Point(0, 0)


def main():
    """Shuffle chapters in a PDF file"""
    parser = ArgumentParser(description="Shuffle chapters in a PDF file")
    parser.add_argument("input", type=Path, help="PDF file to shuffle")
    parser.add_argument(
        "output", type=Path, nargs="?", help="Shuffled PDF file to create"
    )
    parser.add_argument("-e", "--keep-empty-pages", action="store_true")
    args = parser.parse_args()

    infn = args.input
    if args.output:
        outfn = args.output
    else:
        outfn = infn.with_stem(f"{infn.stem}-shuffled")

    print(f"{infn} -> {outfn}")

    indoc = fitz.Document(infn)
    n_pages = indoc.page_count
    if n_pages < 2:
        print(f"Not enough pages ({n_pages}) in document")
        return

    toc = indoc.get_toc(simple=False)
    bookmarks = [
        entry[2] - 1  # ToC entries are 1-based
        for entry in toc
        if entry[3].get("to") == TOP_OF_PAGE
    ]
    bookmarks = list(sorted(bookmarks))
    if bookmarks[0] != 0:
        bookmarks.insert(0, 0)
    if len(bookmarks) < 2:
        print(f"Not enough bookmarks ({len(bookmarks)}) in document")
        return

    bookmarks.append(n_pages)
    spans = list(zip(bookmarks[:-1], bookmarks[1:]))
    random.shuffle(spans)

    outdoc = fitz.Document()

    for nspan, (span_from, span_to) in enumerate(spans, 1):
        outdoc.insert_pdf(indoc, span_from, span_to - 1, final=nspan == len(spans))
    if not args.keep_empty_pages:
        deleted = 0
        for pno in range(outdoc.page_count - 1, 0, -1):
            if not outdoc.get_page_fonts(pno):
                outdoc.delete_page(pno)
                deleted = deleted + 1
        if deleted:
            print(f"Number of empty pages deleted: {deleted}")
    outdoc.ez_save(outfn)


if __name__ == "__main__":
    main()
