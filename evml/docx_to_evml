#!/usr/bin/env python3
import argparse
import zipfile
from lxml import etree as ET

# TODO: What do I do about those marker asterisks
# TODO: Line width


class DocxToEvml(object):
    W = 'http://schemas.openxmlformats.org/wordprocessingml/2006/main'
    NS = {'w': W}

    def run(self):
        self.parse_command_line()
        self.load_docx()
        self.write_evml()

    def parse_command_line(self):
        parser = argparse.ArgumentParser(description='DOCX to EVML')
        parser.add_argument('docx', help='Input file')
        parser.add_argument('evml', help='Output file')
        self.args = parser.parse_args()

    def load_docx(self):
        with zipfile.ZipFile(self.args.docx) as self.docx:
            self.document = self.load_xml('word/document.xml')
            self.footnotes = self.load_xml('word/footnotes.xml')
            self.scan_styles(self.load_xml('word/styles.xml'))
            del self.docx

    def load_xml(self, path):
        with self.docx.open(path) as fo:
            return ET.parse(fo).getroot()

    def scan_styles(self, styles):
        for s in self.xpath(styles, "//w:style[@w:type='character'][w:name[@w:val='Emphasis']]"):
            self.emphasis = s.get(self.wtag('styleId'))

    def xpath(self, node, expr):
        return node.xpath(expr, namespaces=self.NS)

    def wtag(self, tag):
        return '{%s}%s' % (self.W, tag)

    def write_evml(self):
        self.marker = ''
        with open(self.args.evml, 'w') as fo:
            for p in self.xpath(self.document, '//w:body/w:p'):
                for chunk in self.evmlify(p):
                    fo.write(chunk)
                fo.write('\n')

    def evmlify(self, p):
        for r in self.xpath(p, 'w:r'):
            marker = ''
            for s in self.xpath(r, "w:rPr/w:rStyle[@w:val='%s']" % self.emphasis):
                marker = '_'
            if marker != self.marker:
                yield self.marker
                self.marker = marker
                yield self.marker
            for t in self.xpath(r, 'w:t'):
                yield t.text
            for fnr in self.xpath(r, 'w:footnoteReference'):
                fnid = fnr.get(self.wtag('id'))
                yield '[^'
                for fn in self.xpath(self.footnotes, "//w:footnotes/w:footnote[@w:id='%s']" % fnid):
                    for fnp in self.xpath(fn, 'w:p'):
                        yield from self.evmlify(fnp)
                yield '^]'
        yield '\n'


if __name__ == '__main__':
    DocxToEvml().run()

